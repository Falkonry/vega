{"version":3,"file":"vega-projections-core.min.js","sources":["../../../node_modules/d3-geo-projection/src/math.js","../../../node_modules/d3-geo-projection/src/airy.js","../../../node_modules/d3-geo-projection/src/aitoff.js","../../../node_modules/d3-geo-projection/src/armadillo.js","../../../node_modules/d3-geo-projection/src/august.js","../../../node_modules/d3-geo-projection/src/baker.js","../../../node_modules/d3-geo-projection/src/berghaus.js","../../../node_modules/d3-geo-projection/src/hammer.js","../../../node_modules/d3-geo-projection/src/newton.js","../../../node_modules/d3-geo-projection/src/mollweide.js","../../../node_modules/d3-geo-projection/src/boggs.js","../../../node_modules/d3-geo-projection/src/parallel1.js","../../../node_modules/d3-geo-projection/src/sinusoidal.js","../../../node_modules/d3-geo-projection/src/bonne.js","../../../node_modules/d3-geo-projection/src/bottomley.js","../../../node_modules/d3-geo-projection/src/bromley.js","../../../node_modules/d3-geo-projection/src/chamberlin.js","../../../node_modules/d3-geo-projection/src/collignon.js","../../../node_modules/d3-geo-projection/src/craig.js","../../../node_modules/d3-geo-projection/src/craster.js","../../../node_modules/d3-geo-projection/src/cylindricalEqualArea.js","../../../node_modules/d3-geo-projection/src/cylindricalStereographic.js","../../../node_modules/d3-geo-projection/src/eckert1.js","../../../node_modules/d3-geo-projection/src/eckert2.js","../../../node_modules/d3-geo-projection/src/eckert3.js","../../../node_modules/d3-geo-projection/src/eckert4.js","../../../node_modules/d3-geo-projection/src/eckert5.js","../../../node_modules/d3-geo-projection/src/eckert6.js","../../../node_modules/d3-geo-projection/src/eisenlohr.js","../../../node_modules/d3-geo-projection/src/fahey.js","../../../node_modules/d3-geo-projection/src/foucaut.js","../../../node_modules/d3-geo-projection/src/foucautSinusoidal.js","../../../node_modules/d3-geo-projection/src/gilbert.js","../../../node_modules/d3-geo-projection/src/gingery.js","../../../node_modules/d3-geo-projection/src/ginzburgPolyconic.js","../../../node_modules/d3-geo-projection/src/ginzburg4.js","../../../node_modules/d3-geo-projection/src/ginzburg5.js","../../../node_modules/d3-geo-projection/src/ginzburg6.js","../../../node_modules/d3-geo-projection/src/ginzburg8.js","../../../node_modules/d3-geo-projection/src/ginzburg9.js","../../../node_modules/d3-geo-projection/src/square.js","../../../node_modules/d3-geo-projection/src/gringorten.js","../../../node_modules/d3-geo-projection/src/elliptic.js","../../../node_modules/d3-geo-projection/src/guyou.js","../../../node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","../../../node_modules/d3-geo-projection/src/healpix.js","../../../node_modules/d3-geo-projection/src/hill.js","../../../node_modules/d3-geo-projection/src/sinuMollweide.js","../../../node_modules/d3-geo-projection/src/homolosine.js","../../../node_modules/d3-geo-projection/src/hufnagel.js","../../../node_modules/d3-geo-projection/src/integrate.js","../../../node_modules/d3-geo-projection/src/hyperelliptical.js","../../../node_modules/d3-geo-projection/src/interrupted/index.js","../../../node_modules/d3-geo-projection/src/interrupted/boggs.js","../../../node_modules/d3-geo-projection/src/interrupted/homolosine.js","../../../node_modules/d3-geo-projection/src/interrupted/mollweide.js","../../../node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","../../../node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","../../../node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","../../../node_modules/d3-geo-projection/src/kavrayskiy7.js","../../../node_modules/d3-geo-projection/src/lagrange.js","../../../node_modules/d3-geo-projection/src/larrivee.js","../../../node_modules/d3-geo-projection/src/laskowski.js","../../../node_modules/d3-geo-projection/src/littrow.js","../../../node_modules/d3-geo-projection/src/loximuthal.js","../../../node_modules/d3-geo-projection/src/miller.js","../../../node_modules/d3-geo-projection/src/modifiedStereographic.js","../../../node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","../../../node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","../../../node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","../../../node_modules/d3-geo-projection/src/naturalEarth2.js","../../../node_modules/d3-geo-projection/src/nellHammer.js","../../../node_modules/d3-geo-projection/src/interrupted/quarticAuthalic.js","../../../node_modules/d3-geo-projection/src/nicolosi.js","../../../node_modules/d3-geo-projection/src/patterson.js","../../../node_modules/d3-geo-projection/src/polyconic.js","../../../node_modules/d3-geo-projection/src/polyhedral/matrix.js","../../../node_modules/d3-geo-projection/src/polyhedral/index.js","../../../node_modules/d3-geo-projection/src/polyhedral/octahedron.js","../../../node_modules/d3-geo-projection/src/polyhedral/collignon.js","../../../node_modules/d3-geo-projection/src/polyhedral/waterman.js","../../../node_modules/d3-geo-projection/src/quincuncial/index.js","../../../node_modules/d3-geo-projection/src/rectangularPolyconic.js","../../../node_modules/d3-geo-projection/src/robinson.js","../../../node_modules/d3-geo-projection/src/satellite.js","../../../node_modules/d3-geo-projection/src/times.js","../../../node_modules/d3-geo-projection/src/twoPoint.js","../../../node_modules/d3-geo-projection/src/twoPointAzimuthal.js","../../../node_modules/d3-geo-projection/src/twoPointEquidistant.js","../../../node_modules/d3-geo-projection/src/vanDerGrinten.js","../../../node_modules/d3-geo-projection/src/vanDerGrinten2.js","../../../node_modules/d3-geo-projection/src/vanDerGrinten3.js","../../../node_modules/d3-geo-projection/src/vanDerGrinten4.js","../../../node_modules/d3-geo-projection/src/wagner.js","../../../node_modules/d3-geo-projection/src/wagner4.js","../../../node_modules/d3-geo-projection/src/wagner6.js","../../../node_modules/d3-geo-projection/src/wiechel.js","../../../node_modules/d3-geo-projection/src/winkel3.js","../index.js","../../../node_modules/d3-geo-projection/src/bertin.js","../../../node_modules/d3-geo-projection/src/quincuncial/gringorten.js","../../../node_modules/d3-geo-projection/src/quincuncial/peirce.js","../../../node_modules/d3-geo-projection/src/polyhedral/butterfly.js"],"sourcesContent":["export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math.js\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = sinz_2 / cosz_2,\n          lnsecz_2 = -log(abs(cosz_2));\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2)) * (cosz_2 < 0 ? 0.7 : 1);\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math.js\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math.js\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      if (abs(dPhi) > 2) dPhi /= 2;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream)),\n        precision = p.precision();\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90)\n        sphereStream.point(lambda, sPhi0 * 90);\n      if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math.js\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math.js\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n","import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math.js\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math.js\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n","import {abs, epsilon, epsilon2} from \"./math.js\";\n\n// Approximate Newton-Raphson\n// Solve f(x) = y, start from x\nexport function solve(f, y, x) {\n  var steps = 100, delta, f0, f1;\n  x = x === undefined ? 0 : +x;\n  y = +y;\n  do {\n    f0 = f(x);\n    f1 = f(x + epsilon);\n    if (f0 === f1) f1 = f0 + epsilon;\n    x -= delta = (-1 * epsilon * (f0 - y)) / (f0 - f1);\n  } while (steps-- > 0 && abs(delta) > epsilon);\n  return steps < 0 ? NaN : x;\n}\n\n// Approximate Newton-Raphson in 2D\n// Solve f(a,b) = [x,y]\nexport function solve2d(f, MAX_ITERATIONS, eps) {\n  if (MAX_ITERATIONS === undefined) MAX_ITERATIONS = 40;\n  if (eps === undefined) eps = epsilon2;\n  return function(x, y, a, b) {\n    var err2, da, db;\n    a = a === undefined ? 0 : +a;\n    b = b === undefined ? 0 : +b;\n    for (var i = 0; i < MAX_ITERATIONS; i++) {\n      var p = f(a, b),\n        // diffs\n        tx = p[0] - x,\n        ty = p[1] - y;\n      if (abs(tx) < eps && abs(ty) < eps) break; // we're there!\n\n      // backtrack if we overshot\n      var h = tx * tx + ty * ty;\n      if (h > err2) {\n        a -= da /= 2;\n        b -= db /= 2;\n        continue;\n      }\n      err2 = h;\n\n      // partial derivatives\n      var ea = (a > 0 ? -1 : 1) * eps,\n        eb = (b > 0 ? -1 : 1) * eps,\n        pa = f(a + ea, b),\n        pb = f(a, b + eb),\n        dxa = (pa[0] - p[0]) / ea,\n        dya = (pa[1] - p[1]) / ea,\n        dxb = (pb[0] - p[0]) / eb,\n        dyb = (pb[1] - p[1]) / eb,\n        // determinant\n        D = dyb * dxa - dya * dxb,\n        // newton step — or half-step for small D\n        l = (abs(D) < 0.5 ? 0.5 : 1) / D;\n      da = (ty * dxb - tx * dyb) * l;\n      db = (tx * dya - ty * dxa) * l;\n      a += da;\n      b += db;\n      if (abs(da) < eps && abs(db) < eps) break; // we're crawling\n    }\n    return [a, b];\n  };\n}","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math.js\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide.js\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math.js\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math.js\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math.js\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n","import parallel1 from \"./parallel1.js\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math.js\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math.js\";\nimport {mollweideBromleyRaw} from \"./mollweide.js\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n","import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math.js\";\nimport {solve2d} from \"./newton.js\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\n  f.invert = solve2d(f);\n  var p = projection(f).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math.js\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n","import {asin, atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math.js\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n","import {asin, cos, sin} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n","import {atan, cos, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math.js\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math.js\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math.js\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math.js\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august.js\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math.js\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math.js\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {cos, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport {solve} from \"./newton.js\";\n\nexport function foucautSinusoidalRaw(alpha) {\n  var beta = 1 - alpha,\n      equatorial = raw(pi, 0)[0] - raw(-pi, 0)[0],\n      polar = raw(0, halfPi)[1] - raw(0, -halfPi)[1],\n      ratio = sqrt(2 * polar / equatorial);\n\n  function raw(lambda, phi) {\n    var cosphi = cos(phi),\n        sinphi = sin(phi);\n    return [\n      cosphi / (beta + alpha * cosphi) * lambda,\n      beta * phi + alpha * sinphi\n    ];\n  }\n\n  function forward(lambda, phi) {\n    var p = raw(lambda, phi);\n    return [p[0] * ratio, p[1] / ratio];\n  }\n\n  function forwardMeridian(phi) {\n    return forward(0, phi)[1];\n  }\n\n  forward.invert = function(x, y) {\n    var phi = solve(forwardMeridian, y),\n        lambda = x / ratio * (alpha + beta / cos(phi));\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var alpha = 0.5,\n      m = projectionMutator(foucautSinusoidalRaw),\n      p = m(alpha);\n\n  p.alpha = function(_) {\n    return arguments.length ? m(alpha = +_) : alpha;\n  };\n\n  return p\n      .scale(168.725);\n}\n","import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math.js\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function() {\n      return arguments.length ? (projection[name].apply(projection, arguments), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"angle\");\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"fitExtent\");\n  property(\"fitHeight\");\n  property(\"fitSize\");\n  property(\"fitWidth\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math.js\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nimport {pi} from \"./math.js\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n","import {halfPi, pi} from \"./math.js\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math.js\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic.js\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n","import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math.js\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\nimport {abs, asin, degrees, epsilon, floor, max, min, pi, radians, sqrtPi, tau} from \"./math.js\";\n\nvar K = 3,\n    healpixParallel = asin(1 - 1 / K) * degrees,\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphereTop(x, i) {\n  return [x, i & 1 ? 90 - epsilon : healpixParallel];\n}\n\nfunction sphereBottom(x, i) {\n  return [x, i & 1 ? -90 + epsilon : -healpixParallel];\n}\n\nfunction sphereNudge(d) {\n  return [d[0] * (1 - epsilon), d[1]];\n}\n\nfunction sphere(step) {\n  var c = [].concat(\n    range(-180, 180 + step / 2, step).map(sphereTop),\n    range(180, -180 - step / 2, -step).map(sphereBottom)\n  );\n  return {\n    type: \"Polygon\",\n    coordinates: [step === 180 ? c.map(sphereNudge) : c]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math.js\";\nimport {mollweideRaw} from \"./mollweide.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide.js\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\n\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(\n      (4 * pi) /\n        (2 * psiMax +\n          (1 + a - b / 2) * sin(2 * psiMax) +\n          ((a + b) / 2) * sin(4 * psiMax) +\n          (b / 2) * sin(6 * psiMax))\n    ),\n    c = sqrt(\n      ratio *\n        sin(psiMax) *\n        sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))\n    ),\n    M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (\n      (2 * psi +\n        (1 + a - b / 2) * sin(2 * psi) +\n        ((a + b) / 2) * sin(4 * psi) +\n        (b / 2) * sin(6 * psi)) /\n      psiMax\n    );\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function(lambda, phi) {\n    var psi = psiMax * solve(mapping, (M * sin(phi)) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [((kr * c * lambda) / pi) * cos(psi), (kr / c) * sin(psi)];\n  };\n\n  forward.invert = function(x, y) {\n    var psi = solve(inversemapping, (y * c) / k);\n    return [\n      (x * pi) / (cos(psi) * k * c * radius(psi)),\n      asin((psiMax * mapping(psi / psiMax)) / M)\n    ];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n    forward = function(lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n    forward.invert = function(x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\n\nexport default function() {\n  var a = 1,\n    b = 0,\n    psiMax = 45 * radians,\n    ratio = 2,\n    mutate = projectionMutator(hufnagelRaw),\n    projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function(_) {\n    return arguments.length ? mutate((a = +_), b, psiMax, ratio) : a;\n  };\n  projection.b = function(_) {\n    return arguments.length ? mutate(a, (b = +_), psiMax, ratio) : b;\n  };\n  projection.psiMax = function(_) {\n    return arguments.length\n      ? mutate(a, b, (psiMax = +_ * radians), ratio)\n      : psiMax * degrees;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(a, b, psiMax, (ratio = +_)) : ratio;\n  };\n\n  return projection.scale(180.739);\n}\n","// https://github.com/scijs/integrate-adaptive-simpson\n\n// This algorithm adapted from pseudocode in:\n// http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf\nfunction adsimp (f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n  if (state.nanEncountered) {\n    return NaN;\n  }\n\n  var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n\n  h = b - a;\n  f1 = f(a + h * 0.25);\n  f2 = f(b - h * 0.25);\n\n  // Simple check for NaN:\n  if (isNaN(f1)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  // Simple check for NaN:\n  if (isNaN(f2)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  sl = h * (fa + 4 * f1 + fm) / 12;\n  sr = h * (fm + 4 * f2 + fb) / 12;\n  s2 = sl + sr;\n  err = (s2 - V0) / 15;\n\n  if (depth > maxdepth) {\n    state.maxDepthCount++;\n    return s2 + err;\n  } else if (Math.abs(err) < tol) {\n    return s2 + err;\n  } else {\n    m = a + h * 0.5;\n\n    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V1)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V2)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    return V1 + V2;\n  }\n}\n\nexport function integrate (f, a, b, tol, maxdepth) {\n  var state = {\n    maxDepthCount: 0,\n    nanEncountered: false\n  };\n\n  if (tol === undefined) {\n    tol = 1e-8;\n  }\n  if (maxdepth === undefined) {\n    maxdepth = 20;\n  }\n\n  var fa = f(a);\n  var fm = f(0.5 * (a + b));\n  var fb = f(b);\n\n  var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n\n  var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n/*\n  if (state.maxDepthCount > 0 && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n  }\n\n  if (state.nanEncountered && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: NaN encountered. Halting early.');\n  }\n*/\n\n  return result;\n}","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, pi, pow, sign, sin} from \"./math.js\";\nimport {integrate} from \"./integrate.js\";\n\nexport function hyperellipticalRaw(alpha, k, gamma) {\n\n  function elliptic (f) {\n    return alpha + (1 - alpha) * pow(1 - pow(f, k), 1 / k);\n  }\n\n  function z(f) {\n    return integrate(elliptic, 0, f, 1e-4);\n  }\n\n  var G = 1 / z(1),\n      n = 1000,\n      m = (1 + 1e-8) * G,\n      approx = [];\n  for (var i = 0; i <= n; i++)\n      approx.push(z(i / n) * m);\n\n  function Y(sinphi) {\n    var rmin = 0, rmax = n, r = n >> 1;\n    do {\n      if (approx[r] > sinphi) rmax = r; else rmin = r;\n      r = (rmin + rmax) >> 1;\n    } while (r > rmin);\n    var u = approx[r + 1] - approx[r];\n    if (u) u = (sinphi - approx[r + 1]) / u;\n    return (r + 1 + u) / n;\n  }\n\n  var ratio = 2 * Y(1) / pi * G / gamma;\n\n  var forward = function(lambda, phi) {\n    var y = Y(abs(sin(phi))),\n        x = elliptic(y) * lambda;\n    y /= ratio;\n    return [ x, (phi >= 0) ? y : -y ];\n  };\n\n  forward.invert = function(x, y) {\n    var phi;\n    y *= ratio;\n    if (abs(y) < 1) phi = sign(y) * asin(z(abs(y)) * G);\n    return [ x / elliptic(abs(y)), phi ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var alpha = 0,\n      k = 2.5,\n      gamma = 1.183136, // affine = sqrt(2 * gamma / pi) = 0.8679\n      m = projectionMutator(hyperellipticalRaw),\n      p = m(alpha, k, gamma);\n\n  p.alpha = function(_) {\n    return arguments.length ? m(alpha = +_, k, gamma) : alpha;\n  };\n\n  p.k = function(_) {\n    return arguments.length ? m(alpha, k = +_, gamma) : k;\n  };\n\n  p.gamma = function(_) {\n    return arguments.length ? m(alpha, k, gamma = +_) : gamma;\n  };\n\n  return p\n      .scale(152.63);\n}\n","import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes, inverse) {\n  var sphere, bounds;\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  if (inverse) {\n    forward.invert = inverse(forward);\n  } else if (project.invert) {\n    forward.invert = function(x, y) {\n      var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n      for (var i = 0, n = bound.length; i < n; ++i) {\n        var b = bound[i];\n        if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n          var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n          p[0] += lobe[i][1][0];\n          return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n        }\n      }\n    };\n  }\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n  \n  p.lobes = function(_) {\n    if (!arguments.length) return lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * degrees, l[0][1] * degrees],\n          [l[1][0] * degrees, l[1][1] * degrees],\n          [l[2][0] * degrees, l[2][1] * degrees]\n        ];\n      });\n    });\n\n    sphere = interpolateSphere(_);\n\n    lobes = _.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * radians, l[0][1] * radians],\n          [l[1][0] * radians, l[1][1] * radians],\n          [l[2][0] * radians, l[2][1] * radians]\n        ];\n      });\n    });\n\n    bounds = lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        var x0 = project(l[0][0], l[0][1])[0],\n            x1 = project(l[2][0], l[2][1])[0],\n            y0 = project(l[1][0], l[0][1])[1],\n            y1 = project(l[1][0], l[1][1])[1],\n            t;\n        if (y0 > y1) t = y0, y0 = y1, y1 = t;\n        return [[x0, y0], [x1, y1]];\n      });\n    });\n\n    return p;\n  };\n\n  if (lobes != null) p.lobes(lobes);\n\n  return p;\n}\n","import {boggsRaw} from \"../boggs.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n","import {homolosineRaw} from \"../homolosine.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n","import {mollweideRaw} from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n","import {mollweideRaw} from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n","import {sinuMollweideRaw} from \"../sinuMollweide.js\";\nimport interrupt from \"./index.js\";\nimport {solve2d} from \"../newton.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes, solve2d)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {sinusoidalRaw} from \"../sinusoidal.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math.js\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math.js\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math.js\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math.js\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math.js\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      x2_y2_1 = x2 + y2_1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n","import parallel1 from \"./parallel1.js\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math.js\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math.js\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math.js\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1400)\n      .center([-160.908, 62.4864])\n      .clipAngle(30)\n      .angle(7.8);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math.js\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon2} from \"./math.js\";\n\nexport function naturalEarth2Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2, phi6 = phi2 * phi4;\n  return [\n    lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))\n  ];\n}\n\nnaturalEarth2Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta, phi2, phi4, phi6;\n  do {\n    phi2 = phi * phi; phi4 = phi2 * phi2;\n    phi -= delta = ((phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))) - y) /\n      (1.01183 + phi4 * phi4 * ((9 * -0.02625) + (11 * 0.01926) * phi2 + (13 * -0.00396) * phi4));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  phi2 = phi * phi; phi4 = phi2 * phi2; phi6 = phi2 * phi4;\n  return [\n    x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth2Raw)\n      .scale(175.295);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math.js\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n","import {hammerRaw} from \"../hammer.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  0],  [-90,  90], [   0,  0]],\n  [[   0,  0], [  90,  90], [ 180, 0]]\n], [ // southern hemisphere\n  [[-180, 0], [-90, -90], [  0, 0]],\n  [[   0, 0], [ 90, -90], [180, 0]]\n]];\n\nexport default function() {\n  return interrupt(hammerRaw(Infinity), lobes)\n      .rotate([20, 0])\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, halfPi, pi, sign, sin, sqrt} from \"./math.js\";\nimport {solve} from \"./newton.js\";\n\n// Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n    q = cos(phi),\n    s = sign(lambda);\n\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];\n  else if (phi === 0) return [lambda, 0];\n  else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n\n  var b = pi / (2 * lambda) - (2 * lambda) / pi,\n    c = (2 * phi) / pi,\n    d = (1 - c * c) / (sinPhi - c);\n\n  var b2 = b * b,\n    d2 = d * d,\n    b2d2 = 1 + b2 / d2,\n    d2b2 = 1 + d2 / b2;\n\n  var M = ((b * sinPhi) / d - b / 2) / b2d2,\n    N = ((d2 * sinPhi) / b2 + d / 2) / d2b2,\n    m = M * M + (q * q) / b2d2,\n    n = N * N - ((d2 * sinPhi * sinPhi) / b2 + d * sinPhi - 1) / d2b2;\n\n  return [\n    halfPi * (M + sqrt(m) * s),\n    halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)\n  ];\n}\n\nnicolosiRaw.invert = function(x, y) {\n\n  x /= halfPi;\n  y /= halfPi;\n\n  var x2 = x * x,\n    y2 = y * y,\n    x2y2 = x2 + y2,\n    pi2 = pi * pi;\n\n  return [\n    x ? (x2y2 -1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0,\n    solve(function(phi) {\n      return (\n        x2y2 * (pi * sin(phi) - 2 * phi) * pi +\n        4 * phi * phi * (y - sin(phi)) +\n        2 * pi * phi -\n        pi2 * y\n      );\n    }, 0)\n  ];\n};\n\nexport default function() {\n  return projection(nicolosiRaw)\n    .scale(127.267);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math.js\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(y) * sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n","import {atan2, cos, sin, sqrt} from \"../math.js\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n","import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\nimport {default as matrix, multiply, inverse} from \"./matrix.js\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\nexport default function(root, face) {\n\n  recurse(root, {transform: null});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj.angle(-30);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon.js\";\nimport {pi, sqrt} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .angle(-30)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math.js\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * x0 + (y > 0 ? 1 : -1) * d,\n          y1 = -s * y0 + (x > 0 ? 1 : -1) * d;\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, max, min, pi, radians, sign} from \"./math.js\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.593415793900743;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    sign(phi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var phi = y * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(y) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = sign(y) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math.js\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math.js\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n","import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math.js\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\n\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, min, pi, sign, sqrt} from \"./math.js\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  var sy = sign(y);\n  y = abs(y) / pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = y * (2 - (y > 0.5 ? min(y, abs(x)) : 0)),\n      r = x * x + y * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta * r * r > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    sy * halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan} from \"./math.js\";\n\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n        c0 = sqrt(1 - s * s),\n        c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [\n      cx * c0 * c1 * sin(lambda),\n      cy * s * c1\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var t1 = x / cx,\n        t2 = y / cy,\n        p = sqrt(t1 * t1 + t2 * t2),\n        c = 2 * asin(p / 2);\n    return [\n      atan2(x * tan(c), cx * p) / n,\n      p && asin(y * sin(c) / (cy * m1 * p)) / m2\n    ];\n  };\n\n  return forward;\n}\n\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3;\n\n  // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon);\n  // poleline must be <= 90; parallels may approximate but never equal 180\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon);\n  // 0 <= inflation <= 99.999\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon);\n  // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n  ratio = max(ratio, epsilon);\n\n  // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n  var vinflation = inflation/100 + 1;\n  // axial ratio e.g. from 200 to 2:\n  var vratio  = ratio / 100;\n  // the other ones are a bit more complicated...\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n      m1 = sin(poleline) / sin(m2 * halfPi),\n      n = parallels / pi,\n      k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n      cx = k / sqrt(n * m1 * m2),\n      cy = 1 / (k * sqrt(n * m1 * m2));\n\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\n\nexport default function wagner() {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n      parallels = 60 * radians,\n      inflation = 20,\n      ratio = 200,\n      mutate = projectionMutator(wagnerRaw),\n      projection = mutate(poleline, parallels, inflation, ratio);\n\n  projection.poleline = function(_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n\n  projection.parallels = function(_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n  projection.inflation = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n\n  return projection\n    .scale(163.775);\n}\n\nexport function wagner7() {\n  return wagner()\n      .poleline(65)\n      .parallels(60)\n      .inflation(0)\n      .ratio(200)\n      .scale(172.633);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math.js\";\nimport {mollweideBromleyRaw} from \"./mollweide.js\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math.js\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff.js\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math.js\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n","import {projection} from 'vega-projection';\nimport {\n  geoAiry,\n  geoAitoff,\n  geoArmadillo,\n  geoAugust,\n  geoBaker,\n  geoBerghaus,\n  geoBertin1953,\n  geoBoggs,\n  geoBonne,\n  geoBottomley,\n  geoBromley,\n  geoChamberlinAfrica,\n  geoCollignon,\n  geoCraig,\n  geoCraster,\n  geoCylindricalEqualArea,\n  geoCylindricalStereographic,\n  geoEckert1,\n  geoEckert2,\n  geoEckert3,\n  geoEckert4,\n  geoEckert5,\n  geoEckert6,\n  geoEisenlohr,\n  geoFahey,\n  geoFoucaut,\n  geoFoucautSinusoidal,\n  geoGilbert,\n  geoGingery,\n  geoGinzburg4,\n  geoGinzburg5,\n  geoGinzburg6,\n  geoGinzburg8,\n  geoGinzburg9,\n  geoGringorten,\n  geoGringortenQuincuncial,\n  geoGuyou,\n  geoHammer,\n  geoHammerRetroazimuthal,\n  geoHealpix,\n  geoHill,\n  geoHomolosine,\n  geoHufnagel,\n  geoHyperelliptical,\n  geoInterruptedBoggs,\n  geoInterruptedHomolosine,\n  geoInterruptedMollweide,\n  geoInterruptedMollweideHemispheres,\n  geoInterruptedQuarticAuthalic,\n  geoInterruptedSinuMollweide,\n  geoInterruptedSinusoidal,\n  geoKavrayskiy7,\n  geoLagrange,\n  geoLarrivee,\n  geoLaskowski,\n  geoLittrow,\n  geoLoximuthal,\n  geoMiller,\n  geoModifiedStereographicAlaska,\n  geoModifiedStereographicGs48,\n  geoModifiedStereographicGs50,\n  geoModifiedStereographicLee,\n  geoModifiedStereographicMiller,\n  geoMtFlatPolarParabolic,\n  geoMtFlatPolarQuartic,\n  geoMtFlatPolarSinusoidal,\n  geoNaturalEarth2,\n  geoNellHammer,\n  geoNicolosi,\n  geoPatterson,\n  geoPeirceQuincuncial,\n  geoPolyconic,\n  geoPolyhedralButterfly,\n  geoPolyhedralCollignon,\n  geoPolyhedralWaterman,\n  geoRectangularPolyconic,\n  geoRobinson,\n  geoSatellite,\n  geoSinuMollweide,\n  geoSinusoidal,\n  geoTimes,\n  geoTwoPointAzimuthalUsa,\n  geoTwoPointEquidistantUsa,\n  geoVanDerGrinten,\n  geoVanDerGrinten2,\n  geoVanDerGrinten3,\n  geoVanDerGrinten4,\n  geoWagner,\n  geoWagner4,\n  geoWagner6,\n  geoWagner7,\n  geoWiechel,\n  geoWinkel3\n} from 'd3-geo-projection';\n\nprojection('airy', geoAiry);\nprojection('aitoff', geoAitoff);\nprojection('armadillo', geoArmadillo);\nprojection('august', geoAugust);\nprojection('baker', geoBaker);\nprojection('berghaus', geoBerghaus);\nprojection('bertin1953', geoBertin1953);\nprojection('boggs', geoBoggs);\nprojection('bonne', geoBonne);\nprojection('bottomley', geoBottomley);\nprojection('bromley', geoBromley);\nprojection('chamberlinAfrica', geoChamberlinAfrica);\nprojection('collignon', geoCollignon);\nprojection('craig', geoCraig);\nprojection('craster', geoCraster);\nprojection('cylindricalEqualArea', geoCylindricalEqualArea);\nprojection('cylindricalStereographic', geoCylindricalStereographic);\nprojection('eckert1', geoEckert1);\nprojection('eckert2', geoEckert2);\nprojection('eckert3', geoEckert3);\nprojection('eckert4', geoEckert4);\nprojection('eckert5', geoEckert5);\nprojection('eckert6', geoEckert6);\nprojection('eisenlohr', geoEisenlohr);\nprojection('fahey', geoFahey);\nprojection('foucaut', geoFoucaut);\nprojection('foucautSinusoidal', geoFoucautSinusoidal);\nprojection('gilbert', geoGilbert);\nprojection('gingery', geoGingery);\nprojection('ginzburg4', geoGinzburg4);\nprojection('ginzburg5', geoGinzburg5);\nprojection('ginzburg6', geoGinzburg6);\nprojection('ginzburg8', geoGinzburg8);\nprojection('ginzburg9', geoGinzburg9);\nprojection('gringorten', geoGringorten);\nprojection('gringortenQuincuncial', geoGringortenQuincuncial);\nprojection('guyou', geoGuyou);\nprojection('hammer', geoHammer);\nprojection('hammerRetroazimuthal', geoHammerRetroazimuthal);\nprojection('healpix', geoHealpix);\nprojection('hill', geoHill);\nprojection('homolosine', geoHomolosine);\nprojection('hufnagel', geoHufnagel);\nprojection('hyperelliptical', geoHyperelliptical);\nprojection('interruptedBoggs', geoInterruptedBoggs);\nprojection('interruptedHomolosine', geoInterruptedHomolosine);\nprojection('interruptedMollweide', geoInterruptedMollweide);\nprojection('interruptedMollweideHemispheres', geoInterruptedMollweideHemispheres);\nprojection('interruptedQuarticAuthalic', geoInterruptedQuarticAuthalic);\nprojection('interruptedSinuMollweide', geoInterruptedSinuMollweide);\nprojection('interruptedSinusoidal', geoInterruptedSinusoidal);\nprojection('kavrayskiy7', geoKavrayskiy7);\nprojection('lagrange', geoLagrange);\nprojection('larrivee', geoLarrivee);\nprojection('laskowski', geoLaskowski);\nprojection('littrow', geoLittrow);\nprojection('loximuthal', geoLoximuthal);\nprojection('miller', geoMiller);\nprojection('modifiedStereographicAlaska', geoModifiedStereographicAlaska);\nprojection('modifiedStereographicGs48', geoModifiedStereographicGs48);\nprojection('modifiedStereographicGs50', geoModifiedStereographicGs50);\nprojection('modifiedStereographicLee', geoModifiedStereographicLee);\nprojection('modifiedStereographicMiller', geoModifiedStereographicMiller);\nprojection('mtFlatPolarParabolic', geoMtFlatPolarParabolic);\nprojection('mtFlatPolarQuartic', geoMtFlatPolarQuartic);\nprojection('mtFlatPolarSinusoidal', geoMtFlatPolarSinusoidal);\nprojection('naturalEarth2', geoNaturalEarth2);\nprojection('nellHammer', geoNellHammer);\nprojection('nicolosi', geoNicolosi);\nprojection('patterson', geoPatterson);\nprojection('peirceQuincuncial', geoPeirceQuincuncial);\nprojection('polyconic', geoPolyconic);\nprojection('polyhedralButterfly', geoPolyhedralButterfly);\nprojection('polyhedralCollignon', geoPolyhedralCollignon);\nprojection('polyhedralWaterman', geoPolyhedralWaterman);\nprojection('rectangularPolyconic', geoRectangularPolyconic);\nprojection('robinson', geoRobinson);\nprojection('satellite', geoSatellite);\nprojection('sinuMollweide', geoSinuMollweide);\nprojection('sinusoidal', geoSinusoidal);\nprojection('times', geoTimes);\nprojection('twoPointAzimuthalUsa', geoTwoPointAzimuthalUsa);\nprojection('twoPointEquidistantUsa', geoTwoPointEquidistantUsa);\nprojection('vanDerGrinten', geoVanDerGrinten);\nprojection('vanDerGrinten2', geoVanDerGrinten2);\nprojection('vanDerGrinten3', geoVanDerGrinten3);\nprojection('vanDerGrinten4', geoVanDerGrinten4);\nprojection('wagner', geoWagner);\nprojection('wagner4', geoWagner4);\nprojection('wagner6', geoWagner6);\nprojection('wagner7', geoWagner7);\nprojection('wiechel', geoWiechel);\nprojection('winkel3', geoWinkel3);\n","import {geoProjection as projection} from \"d3-geo\";\nimport {hammerRaw} from \"./hammer.js\";\nimport {cos, pi, sin} from \"./math.js\";\nimport {solve2d} from \"./newton.js\";\n\n// Bertin 1953 as a modified Briesemeister\n// https://bl.ocks.org/Fil/5b9ee9636dfb6ffa53443c9006beb642\nexport function bertin1953Raw() {\n  var hammer = hammerRaw(1.68, 2),\n      fu = 1.4, k = 12;\n\n  function forward(lambda, phi) {\n\n    if (lambda + phi < -fu) {\n      var u = (lambda - phi + 1.6) * (lambda + phi + fu) / 8;\n      lambda += u;\n      phi -= 0.8 * u * sin(phi + pi / 2);\n    }\n\n    var r = hammer(lambda, phi);\n\n    var d = (1 - cos(lambda * phi)) / k;\n\n    if (r[1] < 0) {\n      r[0] *= 1 + d;\n    }\n    if (r[1] > 0) {\n      r[1] *= 1 + d / 1.5 * r[0] * r[0];\n    }\n\n    return r;\n  }\n  \n  forward.invert = solve2d(forward);\n  return forward;\n}\n\nexport default function() {\n  // this projection should not be rotated\n  return projection(bertin1953Raw())\n    .rotate([-16.5, -42])\n    .scale(176.57)\n    .center([7.93, 0.09]);\n}\n","import {gringortenRaw} from \"../gringorten.js\";\nimport quincuncial from \"./index.js\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n","import {guyouRaw} from \"../guyou.js\";\nimport quincuncial from \"./index.js\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(101.858)\n      .center([0, 45]);\n}\n"],"names":["abs","Math","atan","atan2","cos","exp","floor","log","max","min","pow","round","sign","x","sin","tan","epsilon","epsilon2","pi","PI","halfPi","quarterPi","sqrt1_2","SQRT1_2","sqrt2","sqrt","sqrtPi","tau","degrees","radians","asin","acos","sinh","cosh","airyRaw","beta","tanBeta_2","b","forward","y","cosx","cosy","siny","cosz","k","invert","delta","r","z","i","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","aitoffRaw","sincia","sinci","armadilloRaw","phi0","sinPhi0","cosPhi0","sPhi0","tanPhi0","lambda","phi","cosPhi","cosLambda","sinLambda","sinPhi","A","fx","fy","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dLambda","dPhi","augustRaw","tanPhi","c","x2","y2","x1","y1","f","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","e","dxdx","dxdy","dydx","dydy","dx","dy","s","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","d","sqrt8","bakerRaw","berghausRaw","lobes","p","azimuthalEquidistantRaw","theta","theta0","alpha","cotAlpha","hammerRaw","B","arguments","length","azimuthalEqualAreaRaw","Infinity","hammerQuarticAuthalicRaw","coordinates","geoAzimuthalEqualAreaRaw","solve","f0","f1","steps","undefined","NaN","solve2d","MAX_ITERATIONS","eps","a","err2","da","db","tx","ty","h","ea","eb","pa","pb","dxa","dya","dxb","dyb","D","l","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","cx","cy","y0","cosPhi_2","tanPhi_2","mollweideRaw","w","boggsRaw","parallel1","projectAt","m","projectionMutator","geoProjectionMutator","parallel","_","sinusoidalRaw","bonneRaw","cotPhi0","rho","bottomleyRaw","sinPsi","ky","bromleyRaw","distance","c1","s1","c2","s2","cosdLambda","sindPhi","sindLambda","angle","longitude","pointRadians","collignonRaw","craigRaw","sqrt3","crasterRaw","cylindricalEqualAreaRaw","cylindricalStereographicRaw","eckert1Raw","eckert2Raw","eckert3Raw","eckert4Raw","eckert5Raw","eckert6Raw","j","eisenlohrK","eisenlohrRaw","s0","c0","t","v","_0","_1","cos1","t2","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","deltaLambda","deltaPhi","faheyK","faheyRaw","foucautRaw","cosk","foucautSinusoidalRaw","equatorial","raw","ratio","cosphi","sinphi","forwardMeridian","gilbertForward","point","gilbertInvert","gingeryRaw","n","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","y_","ginzburgPolyconicRaw","g","phi2","xB","yB","q","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","cosAlpha","sinAlpha","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburg5Raw","ginzburg6Raw","ginzburg8Raw","lambda2","lambda4","ginzburg9Raw","squareRaw","project","projectSquare","location","gringortenRaw","sLambda","sPhi","p2","a2","secPhi","drdPhi","dvdPhi","dp2dPhi","dra2dPhi","mu","nu","zeta","lambda1","x0","g2","zetaMug","f2","gringortenHexadecant","ellipticJ","u","ai","twon","ellipticF","guyouRaw","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","hammerRetroazimuthalRaw","rotate","hammerRetroazimuthalRotation","sx","sy","dpdPhi","dhdPhi","gringortenHexadecantInvert","tn","guyouComplexDivide","healpixParallel","healpixLambert","healpixRaw","H","dy1","sphereTop","sphereBottom","sphereNudge","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","homolosineRaw","hufnagelRaw","psiMax","M","mapping","radius","inversemapping","isNaN","kr","adsimp","fa","fm","fb","V0","tol","maxdepth","depth","state","nanEncountered","sl","sr","V1","V2","err","maxDepthCount","integrate","hyperellipticalRaw","gamma","elliptic","G","approx","push","Y","rmin","rmax","pointEqual","interpolateLine","p1","p0","resampled","interrupt","inverse","sphere","bounds","lobe","bound","projection","geoProjection","stream_","stream","rotateStream","sphereStream","geoStream","lambda0","phi1","type","merge","interpolateSphere","map","kavrayskiy7Raw","lagrangeRaw","pi_sqrt2","larriveeRaw","laskowskiRaw","littrowRaw","loximuthalRaw","millerRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","lambdaPhi","y2_1","x2_y2_1","alaska","gs48","gs50","miller","lee","modifiedStereographic","coefficients","zr","zi","ar","br","bi","deltar","deltai","sinc","modifiedStereographicRaw","clipAngle","rotation","geoRotation","center","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarQuarticRaw","mtFlatPolarSinusoidalRaw","naturalEarth2Raw","phi4","phi6","nellHammerRaw","sinTheta_2","nicolosiRaw","b2","d2","b2d2","d2b2","N","x2y2","pi2","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonYmax","pattersonRaw","polyconicRaw","matrix","subtract","multiply","polyhedral","root","face","node","transform","faceInvert","faceDegrees","children","recurse","parent","edges","faceEdges","shared","found","sharedEdge","forEach","child","hasInverse","proj","polygonStart","lineStart","outline","lineEnd","polygonEnd","edge","multiPoint","notPoles","filter","inside","centroid","geoCentroid","Array","isArray","interpolate","some","yc","octahedron","octahedron$1","kx","collignonK","dot","spherical","cartesian","quincuncial","projectQuincuncial","rectangularPolyconicRaw","E","cotPhi","robinsonRaw","i0","di","ax","ay","bx","by","satelliteRaw","P","vertical","satelliteVerticalRaw","cosOmega","sinOmega","timesRaw","twoPoint","o","R","twoPointAzimuthalRaw","cosd","gnomonicRaw","geoGnomonicRaw","twoPointEquidistantRaw","z0","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","vanDerGrintenRaw","A2","P2","P2_A2","G_P2","Q","vanDerGrinten2Raw","vanDerGrinten3Raw","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D2","wagnerRaw","poleline","parallels","inflation","vratio","m1","t1","wagnerFormula","wagner","mutate","scale","x2_y2","c3","a1","theta1","C_","B_C","F_","sqrtF","wagner4Raw","wagner6Raw","wiechelRaw","sin1_Phi","winkel3Raw","F","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","precision","projectionStream","cr","delta0","hammer","bertin1953Raw","fraction","points","beta0","beta1","beta2","mean","slice","chamberlinRaw","chamberlin","projectionType","geoOrthographic","equirectangular","geoEquirectangular","translate","gilbert","property","name","apply","cRho","sRho","coefficient","rotate_","circle","geoCircle","call","ring","step","concat","range","spacing","faceProjection","gnomonic","faces","w5","xyz","hexagon","cornerNormals","parents","normals","tilt","geoWagner"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,102]}