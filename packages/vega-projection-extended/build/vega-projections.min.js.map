{"version":3,"file":"vega-projections.min.js","sources":["../../../node_modules/d3-array/src/fsum.js","../../../node_modules/d3-array/src/merge.js","../../../node_modules/d3-array/src/range.js","../../../node_modules/d3-geo/src/math.js","../../../node_modules/d3-geo/src/noop.js","../../../node_modules/d3-geo/src/stream.js","../../../node_modules/d3-geo/src/area.js","../../../node_modules/d3-geo/src/bounds.js","../../../node_modules/d3-geo/src/cartesian.js","../../../node_modules/d3-geo/src/centroid.js","../../../node_modules/d3-geo/src/constant.js","../../../node_modules/d3-geo/src/compose.js","../../../node_modules/d3-geo/src/rotation.js","../../../node_modules/d3-geo/src/circle.js","../../../node_modules/d3-geo/src/clip/buffer.js","../../../node_modules/d3-geo/src/pointEqual.js","../../../node_modules/d3-geo/src/clip/rejoin.js","../../../node_modules/d3-geo/src/polygonContains.js","../../../node_modules/d3-geo/src/clip/index.js","../../../node_modules/d3-geo/src/clip/antimeridian.js","../../../node_modules/d3-geo/src/clip/rectangle.js","../../../node_modules/d3-geo/src/clip/line.js","../../../node_modules/d3-geo/src/interpolate.js","../../../node_modules/d3-geo/src/identity.js","../../../node_modules/d3-geo/src/path/bounds.js","../../../node_modules/d3-geo/src/transform.js","../../../node_modules/d3-geo/src/projection/fit.js","../../../node_modules/d3-geo/src/projection/resample.js","../../../node_modules/d3-geo/src/projection/index.js","../../../node_modules/d3-geo/src/clip/circle.js","../../../node_modules/d3-geo/src/projection/azimuthal.js","../../../node_modules/d3-geo/src/projection/azimuthalEqualArea.js","../../../node_modules/d3-geo/src/projection/azimuthalEquidistant.js","../../../node_modules/d3-geo/src/projection/equirectangular.js","../../../node_modules/d3-geo/src/projection/gnomonic.js","../../../node_modules/d3-geo/src/projection/orthographic.js","../../../node_modules/d3-geo-projection/src/math.js","../../../node_modules/d3-geo-projection/src/airy.js","../../../node_modules/d3-geo-projection/src/aitoff.js","../../../node_modules/d3-geo-projection/src/armadillo.js","../../../node_modules/d3-geo-projection/src/august.js","../../../node_modules/d3-geo-projection/src/baker.js","../../../node_modules/d3-geo-projection/src/berghaus.js","../../../node_modules/d3-geo-projection/src/hammer.js","../../../node_modules/d3-geo-projection/src/newton.js","../../../node_modules/d3-geo-projection/src/mollweide.js","../../../node_modules/d3-geo-projection/src/boggs.js","../../../node_modules/d3-geo-projection/src/parallel1.js","../../../node_modules/d3-geo-projection/src/sinusoidal.js","../../../node_modules/d3-geo-projection/src/bonne.js","../../../node_modules/d3-geo-projection/src/bottomley.js","../../../node_modules/d3-geo-projection/src/bromley.js","../../../node_modules/d3-geo-projection/src/chamberlin.js","../../../node_modules/d3-geo-projection/src/collignon.js","../../../node_modules/d3-geo-projection/src/craig.js","../../../node_modules/d3-geo-projection/src/craster.js","../../../node_modules/d3-geo-projection/src/cylindricalEqualArea.js","../../../node_modules/d3-geo-projection/src/cylindricalStereographic.js","../../../node_modules/d3-geo-projection/src/eckert1.js","../../../node_modules/d3-geo-projection/src/eckert2.js","../../../node_modules/d3-geo-projection/src/eckert3.js","../../../node_modules/d3-geo-projection/src/eckert4.js","../../../node_modules/d3-geo-projection/src/eckert5.js","../../../node_modules/d3-geo-projection/src/eckert6.js","../../../node_modules/d3-geo-projection/src/eisenlohr.js","../../../node_modules/d3-geo-projection/src/fahey.js","../../../node_modules/d3-geo-projection/src/foucaut.js","../../../node_modules/d3-geo-projection/src/foucautSinusoidal.js","../../../node_modules/d3-geo-projection/src/gilbert.js","../../../node_modules/d3-geo-projection/src/gingery.js","../../../node_modules/d3-geo-projection/src/ginzburgPolyconic.js","../../../node_modules/d3-geo-projection/src/ginzburg4.js","../../../node_modules/d3-geo-projection/src/ginzburg5.js","../../../node_modules/d3-geo-projection/src/ginzburg6.js","../../../node_modules/d3-geo-projection/src/ginzburg8.js","../../../node_modules/d3-geo-projection/src/ginzburg9.js","../../../node_modules/d3-geo-projection/src/square.js","../../../node_modules/d3-geo-projection/src/gringorten.js","../../../node_modules/d3-geo-projection/src/elliptic.js","../../../node_modules/d3-geo-projection/src/guyou.js","../../../node_modules/d3-geo-projection/src/hammerRetroazimuthal.js","../../../node_modules/d3-geo-projection/src/healpix.js","../../../node_modules/d3-geo-projection/src/hill.js","../../../node_modules/d3-geo-projection/src/sinuMollweide.js","../../../node_modules/d3-geo-projection/src/homolosine.js","../../../node_modules/d3-geo-projection/src/hufnagel.js","../../../node_modules/d3-geo-projection/src/integrate.js","../../../node_modules/d3-geo-projection/src/hyperelliptical.js","../../../node_modules/d3-geo-projection/src/interrupted/index.js","../../../node_modules/d3-geo-projection/src/interrupted/boggs.js","../../../node_modules/d3-geo-projection/src/interrupted/homolosine.js","../../../node_modules/d3-geo-projection/src/interrupted/mollweide.js","../../../node_modules/d3-geo-projection/src/interrupted/mollweideHemispheres.js","../../../node_modules/d3-geo-projection/src/interrupted/sinuMollweide.js","../../../node_modules/d3-geo-projection/src/interrupted/sinusoidal.js","../../../node_modules/d3-geo-projection/src/kavrayskiy7.js","../../../node_modules/d3-geo-projection/src/lagrange.js","../../../node_modules/d3-geo-projection/src/larrivee.js","../../../node_modules/d3-geo-projection/src/laskowski.js","../../../node_modules/d3-geo-projection/src/littrow.js","../../../node_modules/d3-geo-projection/src/loximuthal.js","../../../node_modules/d3-geo-projection/src/miller.js","../../../node_modules/d3-geo-projection/src/modifiedStereographic.js","../../../node_modules/d3-geo-projection/src/mtFlatPolarParabolic.js","../../../node_modules/d3-geo-projection/src/mtFlatPolarQuartic.js","../../../node_modules/d3-geo-projection/src/mtFlatPolarSinusoidal.js","../../../node_modules/d3-geo-projection/src/naturalEarth2.js","../../../node_modules/d3-geo-projection/src/nellHammer.js","../../../node_modules/d3-geo-projection/src/interrupted/quarticAuthalic.js","../../../node_modules/d3-geo-projection/src/nicolosi.js","../../../node_modules/d3-geo-projection/src/patterson.js","../../../node_modules/d3-geo-projection/src/polyconic.js","../../../node_modules/d3-geo-projection/src/polyhedral/matrix.js","../../../node_modules/d3-geo-projection/src/polyhedral/index.js","../../../node_modules/d3-geo-projection/src/polyhedral/octahedron.js","../../../node_modules/d3-geo-projection/src/polyhedral/collignon.js","../../../node_modules/d3-geo-projection/src/polyhedral/waterman.js","../../../node_modules/d3-geo-projection/src/quincuncial/index.js","../../../node_modules/d3-geo-projection/src/rectangularPolyconic.js","../../../node_modules/d3-geo-projection/src/robinson.js","../../../node_modules/d3-geo-projection/src/satellite.js","../../../node_modules/d3-geo-projection/src/times.js","../../../node_modules/d3-geo-projection/src/twoPoint.js","../../../node_modules/d3-geo-projection/src/twoPointAzimuthal.js","../../../node_modules/d3-geo-projection/src/twoPointEquidistant.js","../../../node_modules/d3-geo-projection/src/vanDerGrinten.js","../../../node_modules/d3-geo-projection/src/vanDerGrinten2.js","../../../node_modules/d3-geo-projection/src/vanDerGrinten3.js","../../../node_modules/d3-geo-projection/src/vanDerGrinten4.js","../../../node_modules/d3-geo-projection/src/wagner.js","../../../node_modules/d3-geo-projection/src/wagner4.js","../../../node_modules/d3-geo-projection/src/wagner6.js","../../../node_modules/d3-geo-projection/src/wiechel.js","../../../node_modules/d3-geo-projection/src/winkel3.js","../index.js","../../../node_modules/d3-geo-projection/src/bertin.js","../../../node_modules/d3-geo-projection/src/quincuncial/gringorten.js","../../../node_modules/d3-geo-projection/src/quincuncial/peirce.js","../../../node_modules/d3-geo-projection/src/polyhedral/butterfly.js"],"sourcesContent":["// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nexport class Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nexport function fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nexport function fcumsum(values, valueof) {\n  const adder = new Adder();\n  let index = -1;\n  return Float64Array.from(values, valueof === undefined\n      ? v => adder.add(+v || 0)\n      : v => adder.add(+valueof(v, ++index, values) || 0)\n  );\n}\n","function* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nexport default function merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n","export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var hypot = Math.hypot;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import {Adder} from \"d3-array\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nexport var areaRingSum = new Adder();\n\n// hello?\n\nvar areaSum = new Adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum = new Adder();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum = new Adder();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {Adder} from \"d3-array\";\nimport {areaStream, areaRingSum} from \"./area.js\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport {abs, degrees, epsilon, radians} from \"./math.js\";\nimport stream from \"./stream.js\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum,\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum = new Adder();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  },\n  sphere: function() {\n    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import {Adder} from \"d3-array\";\nimport {asin, atan2, cos, degrees, epsilon, epsilon2, hypot, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = hypot(cx, cy, cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2.add(v * cx);\n  Y2.add(v * cy);\n  Z2.add(v * cz);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 = 0;\n  X2 = new Adder();\n  Y2 = new Adder();\n  Z2 = new Adder();\n  stream(object, centroidStream);\n\n  var x = +X2,\n      y = +Y2,\n      z = +Z2,\n      m = hypot(x, y, z);\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = hypot(x, y, z);\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / m) * degrees];\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose.js\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;\n  return [lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    lambda += deltaLambda;\n    if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;\n    return [lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport constant from \"./constant.js\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math.js\";\nimport {rotateRadians} from \"./rotation.js\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(6),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import noop from \"../noop.js\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y, m) {\n      line.push([x, y, m]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","import {abs, epsilon} from \"./math.js\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual.js\";\nimport {epsilon} from \"../math.js\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    if (pointEqual(p0, p1)) {\n      if (!p0[2] && !p1[2]) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n      // handle degenerate cases by moving the point\n      p1[0] += 2 * epsilon;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import {Adder} from \"d3-array\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, epsilon2, halfPi, pi, quarterPi, sign, sin, tau} from \"./math.js\";\n\nfunction longitude(point) {\n  return abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  var sum = new Adder();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ (winding & 1);\n}\n","import clipBuffer from \"./buffer.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {epsilon, halfPi} from \"../math.js\";\nimport polygonContains from \"../polygonContains.js\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {abs, epsilon} from \"../math.js\";\nimport clipBuffer from \"./buffer.js\";\nimport clipLine from \"./line.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","export default x => x;\n","import noop from \"../noop.js\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import {default as geoStream} from \"../stream.js\";\nimport boundsStream from \"../path/bounds.js\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n","import {cartesian} from \"../cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math.js\";\nimport {transformer} from \"../transform.js\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math.js\";\nimport {rotateRadians} from \"../rotation.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport resample from \"./resample.js\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy, sx, sy) {\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k * sx, (dy - y) / k * sy];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\n  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate angle\n      sx = 1, // reflectX\n      sy = 1, // reflectX\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.reflectX = function(_) {\n    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\n  };\n\n  projection.reflectY = function(_) {\n    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\n        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian.js\";\nimport {circleStream} from \"../circle.js\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 6 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))\n            point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math.js\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n        if (k === Infinity) return [2, 0];\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, sqrt} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {\n  return sqrt(2 / (1 + cxcy));\n});\n\nazimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {\n  return 2 * asin(z / 2);\n});\n\nexport default function() {\n  return projection(azimuthalEqualAreaRaw)\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {acos, sin} from \"../math.js\";\nimport {azimuthalRaw, azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport var azimuthalEquidistantRaw = azimuthalRaw(function(c) {\n  return (c = acos(c)) && c / sin(c);\n});\n\nazimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {\n  return z;\n});\n\nexport default function() {\n  return projection(azimuthalEquidistantRaw)\n      .scale(79.4188)\n      .clipAngle(180 - 1e-3);\n}\n","import projection from \"./index.js\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function gnomonicRaw(x, y) {\n  var cy = cos(y), k = cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\ngnomonicRaw.invert = azimuthalInvert(atan);\n\nexport default function() {\n  return projection(gnomonicRaw)\n      .scale(144.049)\n      .clipAngle(60);\n}\n","import {asin, cos, epsilon, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","export var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var ceil = Math.ceil;\nexport var cos = Math.cos;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var log = Math.log;\nexport var max = Math.max;\nexport var min = Math.min;\nexport var pow = Math.pow;\nexport var round = Math.round;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sin = Math.sin;\nexport var tan = Math.tan;\n\nexport var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var sqrt1_2 = Math.SQRT1_2;\nexport var sqrt2 = sqrt(2);\nexport var sqrtPi = sqrt(pi);\nexport var tau = pi * 2;\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport function sinci(x) {\n  return x ? x / Math.sin(x) : 1;\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function sqrt(x) {\n  return x > 0 ? Math.sqrt(x) : 0;\n}\n\nexport function tanh(x) {\n  x = exp(2 * x);\n  return (x - 1) / (x + 1);\n}\n\nexport function sinh(x) {\n  return (exp(x) - exp(-x)) / 2;\n}\n\nexport function cosh(x) {\n  return (exp(x) + exp(-x)) / 2;\n}\n\nexport function arsinh(x) {\n  return log(x + sqrt(x * x + 1));\n}\n\nexport function arcosh(x) {\n  return log(x + sqrt(x * x - 1));\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, halfPi, log, radians, sin, sqrt, tan} from \"./math.js\";\n\nexport function airyRaw(beta) {\n  var tanBeta_2 = tan(beta / 2),\n      b = 2 * log(cos(beta / 2)) / (tanBeta_2 * tanBeta_2);\n\n  function forward(x, y) {\n    var cosx = cos(x),\n        cosy = cos(y),\n        siny = sin(y),\n        cosz = cosy * cosx,\n        k = -((1 - cosz ? log((1 + cosz) / 2) / (1 - cosz) : -0.5) + b / (1 + cosz));\n    return [k * cosy * sin(x), k * siny];\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y),\n        z = -beta / 2,\n        i = 50, delta;\n    if (!r) return [0, 0];\n    do {\n      var z_2 = z / 2,\n          cosz_2 = cos(z_2),\n          sinz_2 = sin(z_2),\n          tanz_2 = sinz_2 / cosz_2,\n          lnsecz_2 = -log(abs(cosz_2));\n      z -= delta = (2 / tanz_2 * lnsecz_2 - b * tanz_2 - r) / (-lnsecz_2 / (sinz_2 * sinz_2) + 1 - b / (2 * cosz_2 * cosz_2)) * (cosz_2 < 0 ? 0.7 : 1);\n    } while (abs(delta) > epsilon && --i > 0);\n    var sinz = sin(z);\n    return [atan2(x * sinz, r * cos(z)), asin(y * sinz / r)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var beta = halfPi,\n      m = projectionMutator(airyRaw),\n      p = m(beta);\n\n  p.radius = function(_) {\n    return arguments.length ? m(beta = _ * radians) : beta * degrees;\n  };\n\n  return p\n      .scale(179.976)\n      .clipAngle(147);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, pi, sin, sinci, sqrt} from \"./math.js\";\n\nexport function aitoffRaw(x, y) {\n  var cosy = cos(y), sincia = sinci(acos(cosy * cos(x /= 2)));\n  return [2 * cosy * sin(x) * sincia, sin(y) * sincia];\n}\n\n// Abort if [x, y] is not within an ellipse centered at [0, 0] with\n// semi-major axis pi and semi-minor axis pi/2.\naitoffRaw.invert = function(x, y) {\n  if (x * x + 4 * y * y > pi * pi + epsilon) return;\n  var x1 = x, y1 = y, i = 25;\n  do {\n    var sinx = sin(x1),\n        sinx_2 = sin(x1 / 2),\n        cosx_2 = cos(x1 / 2),\n        siny = sin(y1),\n        cosy = cos(y1),\n        sin_2y = sin(2 * y1),\n        sin2y = siny * siny,\n        cos2y = cosy * cosy,\n        sin2x_2 = sinx_2 * sinx_2,\n        c = 1 - cos2y * cosx_2 * cosx_2,\n        e = c ? acos(cosy * cosx_2) * sqrt(f = 1 / c) : f = 0,\n        f,\n        fx = 2 * e * cosy * sinx_2 - x,\n        fy = e * siny - y,\n        dxdx = f * (cos2y * sin2x_2 + e * cosy * cosx_2 * sin2y),\n        dxdy = f * (0.5 * sinx * sin_2y - e * 2 * siny * sinx_2),\n        dydx = f * 0.25 * (sin_2y * sinx_2 - e * siny * cos2y * sinx),\n        dydy = f * (sin2y * cosx_2 + e * sin2x_2 * cosy),\n        z = dxdy * dydx - dydy * dxdx;\n    if (!z) break;\n    var dx = (fy * dxdy - fx * dydy) / z,\n        dy = (fx * dydx - fy * dxdx) / z;\n    x1 -= dx, y1 -= dy;\n  } while ((abs(dx) > epsilon || abs(dy) > epsilon) && --i > 0);\n  return [x1, y1];\n};\n\nexport default function() {\n  return projection(aitoffRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, atan2, cos, degrees, epsilon, radians, sin, tan} from \"./math.js\";\n\nexport function armadilloRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      k = (1 + sinPhi0 - cosPhi0) / 2;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        cosLambda = cos(lambda /= 2);\n    return [\n      (1 + cosPhi) * sin(lambda),\n      (sPhi0 * phi > -atan2(cosLambda, tanPhi0) - 1e-3 ? 0 : -sPhi0 * 10) + k + sin(phi) * cosPhi0 - (1 + cosPhi) * sinPhi0 * cosLambda // TODO D3 core should allow null or [NaN, NaN] to be returned.\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = 0,\n        phi = 0,\n        i = 50;\n    do {\n      var cosLambda = cos(lambda),\n          sinLambda = sin(lambda),\n          cosPhi = cos(phi),\n          sinPhi = sin(phi),\n          A = 1 + cosPhi,\n          fx = A * sinLambda - x,\n          fy = k + sinPhi * cosPhi0 - A * sinPhi0 * cosLambda - y,\n          dxdLambda = A * cosLambda / 2,\n          dxdPhi = -sinLambda * sinPhi,\n          dydLambda = sinPhi0 * A * sinLambda / 2,\n          dydPhi = cosPhi0 * cosPhi + sinPhi0 * cosLambda * sinPhi,\n          denominator = dxdPhi * dydLambda - dydPhi * dxdLambda,\n          dLambda = (fy * dxdPhi - fx * dydPhi) / denominator / 2,\n          dPhi = (fx * dydLambda - fy * dxdLambda) / denominator;\n      if (abs(dPhi) > 2) dPhi /= 2;\n      lambda -= dLambda, phi -= dPhi;\n    } while ((abs(dLambda) > epsilon || abs(dPhi) > epsilon) && --i > 0);\n    return sPhi0 * phi > -atan2(cos(lambda), tanPhi0) - 1e-3 ? [lambda * 2, phi] : null;\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var phi0 = 20 * radians,\n      sPhi0 = phi0 >= 0 ? 1 : -1,\n      tanPhi0 = tan(sPhi0 * phi0),\n      m = projectionMutator(armadilloRaw),\n      p = m(phi0),\n      stream_ = p.stream;\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    tanPhi0 = tan((sPhi0 = (phi0 = _ * radians) >= 0 ? 1 : -1) * phi0);\n    return m(phi0);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream)),\n        precision = p.precision();\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var lambda = sPhi0 * -180; sPhi0 * lambda < 180; lambda += sPhi0 * 90)\n        sphereStream.point(lambda, sPhi0 * 90);\n      if (phi0) while (sPhi0 * (lambda -= 3 * sPhi0 * precision) >= -180) {\n        sphereStream.point(lambda, sPhi0 * -atan2(cos(lambda * radians / 2), tanPhi0) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(218.695)\n      .center([0, 28.0974]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, arcosh, arsinh, asin, atan2, cos, cosh, sign, sin, sinh, sqrt, tan} from \"./math.js\";\n\nexport function augustRaw(lambda, phi) {\n  var tanPhi = tan(phi / 2),\n      k = sqrt(1 - tanPhi * tanPhi),\n      c = 1 + k * cos(lambda /= 2),\n      x = sin(lambda) * k / c,\n      y = tanPhi / c,\n      x2 = x * x,\n      y2 = y * y;\n  return [\n    4 / 3 * x * (3 + x2 - 3 * y2),\n    4 / 3 * y * (3 + 3 * x2 - y2)\n  ];\n}\n\naugustRaw.invert = function(x, y) {\n  x *= 3 / 8, y *= 3 / 8;\n  if (!x && abs(y) > 1) return null;\n  var x2 = x * x,\n      y2 = y * y,\n      s = 1 + x2 + y2,\n      sin3Eta = sqrt((s - sqrt(s * s - 4 * y * y)) / 2),\n      eta = asin(sin3Eta) / 3,\n      xi = sin3Eta ? arcosh(abs(y / sin3Eta)) / 3 : arsinh(abs(x)) / 3,\n      cosEta = cos(eta),\n      coshXi = cosh(xi),\n      d = coshXi * coshXi - cosEta * cosEta;\n  return [\n    sign(x) * 2 * atan2(sinh(xi) * cosEta, 0.25 - d),\n    sign(y) * 2 * atan2(coshXi * sin(eta), 0.25 + d)\n  ];\n};\n\nexport default function() {\n  return projection(augustRaw)\n      .scale(66.1603);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, atan, cos, epsilon2, exp, halfPi, log, quarterPi, sign, sin, sqrt, sqrt2, tan} from \"./math.js\";\n\nvar sqrt8 = sqrt(8),\n    phi0 = log(1 + sqrt2);\n\nexport function bakerRaw(lambda, phi) {\n  var phi0 = abs(phi);\n  return phi0 < quarterPi\n      ? [lambda, log(tan(quarterPi + phi / 2))]\n      : [lambda * cos(phi0) * (2 * sqrt2 - 1 / sin(phi0)), sign(phi) * (2 * sqrt2 * (phi0 - quarterPi) - log(tan(phi0 / 2)))];\n}\n\nbakerRaw.invert = function(x, y) {\n  if ((y0 = abs(y)) < phi0) return [x, 2 * atan(exp(y)) - halfPi];\n  var phi = quarterPi, i = 25, delta, y0;\n  do {\n    var cosPhi_2 = cos(phi / 2), tanPhi_2 = tan(phi / 2);\n    phi -= delta = (sqrt8 * (phi - quarterPi) - log(tanPhi_2) - y0) / (sqrt8 - cosPhi_2 * cosPhi_2 / (2 * tanPhi_2));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  return [x / (cos(phi) * (sqrt8 - 1 / sin(phi))), sign(y) * phi];\n};\n\nexport default function() {\n  return projection(bakerRaw)\n      .scale(112.314);\n}\n","import {geoProjectionMutator as projectionMutator, geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {abs, acos, asin, atan, atan2, cos, degrees, halfPi, pi, radians, round, sin, sqrt, tan} from \"./math.js\";\n\nexport function berghausRaw(lobes) {\n  var k = 2 * pi / lobes;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi);\n    if (abs(lambda) > halfPi) { // back hemisphere\n      var theta = atan2(p[1], p[0]),\n          r = sqrt(p[0] * p[0] + p[1] * p[1]),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          alpha = atan2(sin(theta -= theta0), 2 - cos(theta)); // angle relative to lobe end\n      theta = theta0 + asin(pi / r * sin(alpha)) - alpha;\n      p[0] = r * cos(theta);\n      p[1] = r * sin(theta);\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r = sqrt(x * x + y * y);\n    if (r > halfPi) {\n      var theta = atan2(y, x),\n          theta0 = k * round((theta - halfPi) / k) + halfPi,\n          s = theta > theta0 ? -1 : 1,\n          A = r * cos(theta0 - theta),\n          cotAlpha = 1 / tan(s * acos((A - pi) / sqrt(pi * (pi - 2 * A) + r * r)));\n      theta = theta0 + 2 * atan((cotAlpha + s * sqrt(cotAlpha * cotAlpha - 3)) / 3);\n      x = r * cos(theta), y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var lobes = 5,\n      m = projectionMutator(berghausRaw),\n      p = m(lobes),\n      projectionStream = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.lobes = function(_) {\n    return arguments.length ? m(lobes = +_) : lobes;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = projectionStream(stream),\n        sphereStream = (p.rotate([0, 0]), projectionStream(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 360 / lobes, delta0 = 2 * pi / lobes, phi = 90 - 180 / lobes, phi0 = halfPi; i < lobes; ++i, phi -= delta, phi0 -= delta0) {\n        sphereStream.point(atan2(sr * cos(phi0), cr) * degrees, asin(sr * sin(phi0)) * degrees);\n        if (phi < -90) {\n          sphereStream.point(-90, -180 - phi - epsilon);\n          sphereStream.point(-90, -180 - phi + epsilon);\n        } else {\n          sphereStream.point(90, phi + epsilon);\n          sphereStream.point(90, phi - epsilon);\n        }\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .scale(87.8076)\n      .center([0, 17.1875])\n      .clipAngle(180 - 1e-3);\n}\n","import {geoAzimuthalEqualAreaRaw as azimuthalEqualAreaRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {asin, cos, sin} from \"./math.js\";\n\nexport function hammerRaw(A, B) {\n  if (arguments.length < 2) B = A;\n  if (B === 1) return azimuthalEqualAreaRaw;\n  if (B === Infinity) return hammerQuarticAuthalicRaw;\n\n  function forward(lambda, phi) {\n    var coordinates = azimuthalEqualAreaRaw(lambda / B, phi);\n    coordinates[0] *= A;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    var coordinates = azimuthalEqualAreaRaw.invert(x / A, y);\n    coordinates[0] *= B;\n    return coordinates;\n  };\n\n  return forward;\n}\n\nfunction hammerQuarticAuthalicRaw(lambda, phi) {\n  return [\n    lambda * cos(phi) / cos(phi /= 2),\n    2 * sin(phi)\n  ];\n}\n\nhammerQuarticAuthalicRaw.invert = function(x, y) {\n  var phi = 2 * asin(y / 2);\n  return [\n    x * cos(phi / 2) / cos(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  var B = 2,\n      m = projectionMutator(hammerRaw),\n      p = m(B);\n\n  p.coefficient = function(_) {\n    if (!arguments.length) return B;\n    return m(B = +_);\n  };\n\n  return p\n    .scale(169.529);\n}\n","import {abs, epsilon, epsilon2} from \"./math.js\";\n\n// Approximate Newton-Raphson\n// Solve f(x) = y, start from x\nexport function solve(f, y, x) {\n  var steps = 100, delta, f0, f1;\n  x = x === undefined ? 0 : +x;\n  y = +y;\n  do {\n    f0 = f(x);\n    f1 = f(x + epsilon);\n    if (f0 === f1) f1 = f0 + epsilon;\n    x -= delta = (-1 * epsilon * (f0 - y)) / (f0 - f1);\n  } while (steps-- > 0 && abs(delta) > epsilon);\n  return steps < 0 ? NaN : x;\n}\n\n// Approximate Newton-Raphson in 2D\n// Solve f(a,b) = [x,y]\nexport function solve2d(f, MAX_ITERATIONS, eps) {\n  if (MAX_ITERATIONS === undefined) MAX_ITERATIONS = 40;\n  if (eps === undefined) eps = epsilon2;\n  return function(x, y, a, b) {\n    var err2, da, db;\n    a = a === undefined ? 0 : +a;\n    b = b === undefined ? 0 : +b;\n    for (var i = 0; i < MAX_ITERATIONS; i++) {\n      var p = f(a, b),\n        // diffs\n        tx = p[0] - x,\n        ty = p[1] - y;\n      if (abs(tx) < eps && abs(ty) < eps) break; // we're there!\n\n      // backtrack if we overshot\n      var h = tx * tx + ty * ty;\n      if (h > err2) {\n        a -= da /= 2;\n        b -= db /= 2;\n        continue;\n      }\n      err2 = h;\n\n      // partial derivatives\n      var ea = (a > 0 ? -1 : 1) * eps,\n        eb = (b > 0 ? -1 : 1) * eps,\n        pa = f(a + ea, b),\n        pb = f(a, b + eb),\n        dxa = (pa[0] - p[0]) / ea,\n        dya = (pa[1] - p[1]) / ea,\n        dxb = (pb[0] - p[0]) / eb,\n        dyb = (pb[1] - p[1]) / eb,\n        // determinant\n        D = dyb * dxa - dya * dxb,\n        // newton step — or half-step for small D\n        l = (abs(D) < 0.5 ? 0.5 : 1) / D;\n      da = (ty * dxb - tx * dyb) * l;\n      db = (tx * dya - ty * dxa) * l;\n      a += da;\n      b += db;\n      if (abs(da) < eps && abs(db) < eps) break; // we're crawling\n    }\n    return [a, b];\n  };\n}","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt2} from \"./math.js\";\n\nexport function mollweideBromleyTheta(cp, phi) {\n  var cpsinPhi = cp * sin(phi), i = 30, delta;\n  do phi -= delta = (phi + sin(phi) - cpsinPhi) / (1 + cos(phi));\n  while (abs(delta) > epsilon && --i > 0);\n  return phi / 2;\n}\n\nexport function mollweideBromleyRaw(cx, cy, cp) {\n\n  function forward(lambda, phi) {\n    return [cx * lambda * cos(phi = mollweideBromleyTheta(cp, phi)), cy * sin(phi)];\n  }\n\n  forward.invert = function(x, y) {\n    return y = asin(y / cy), [x / (cx * cos(y)), asin((2 * y + sin(2 * y)) / cp)];\n  };\n\n  return forward;\n}\n\nexport var mollweideRaw = mollweideBromleyRaw(sqrt2 / halfPi, sqrt2, pi);\n\nexport default function() {\n  return projection(mollweideRaw)\n      .scale(169.529);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideBromleyTheta} from \"./mollweide.js\";\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math.js\";\n\nvar k = 2.00276,\n    w = 1.11072;\n\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\n\nboggsRaw.invert = function(x, y) {\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\n\nexport default function() {\n  return projection(boggsRaw)\n      .scale(160.857);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {degrees, radians} from \"./math.js\";\n\nexport default function(projectAt) {\n  var phi0 = 0,\n      m = projectionMutator(projectAt),\n      p = m(phi0);\n\n  p.parallel = function(_) {\n    return arguments.length ? m(phi0 = _ * radians) : phi0 * degrees;\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos} from \"./math.js\";\n\nexport function sinusoidalRaw(lambda, phi) {\n  return [lambda * cos(phi), phi];\n}\n\nsinusoidalRaw.invert = function(x, y) {\n  return [x / cos(y), y];\n};\n\nexport default function() {\n  return projection(sinusoidalRaw)\n      .scale(152.63);\n}\n","import parallel1 from \"./parallel1.js\";\nimport {atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\n\nexport function bonneRaw(phi0) {\n  if (!phi0) return sinusoidalRaw;\n  var cotPhi0 = 1 / tan(phi0);\n\n  function forward(lambda, phi) {\n    var rho = cotPhi0 + phi0 - phi,\n        e = rho ? lambda * cos(phi) / rho : rho;\n    return [rho * sin(e), cotPhi0 - rho * cos(e)];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + (y = cotPhi0 - y) * y),\n        phi = cotPhi0 + phi0 - rho;\n    return [rho / cos(phi) * atan2(x, y), phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(bonneRaw)\n      .scale(123.082)\n      .center([0, 26.1441])\n      .parallel(45);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math.js\";\n\nexport function bottomleyRaw(sinPsi) {\n\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n\n  forward.invert = function(x, y) {\n    var x1 = x * sinPsi,\n        y1 = halfPi - y,\n        rho = sqrt(x1 * x1 + y1 * y1),\n        eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var sinPsi = 0.5,\n      m = projectionMutator(bottomleyRaw),\n      p = m(sinPsi);\n\n  p.fraction = function(_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n\n  return p\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi} from \"./math.js\";\nimport {mollweideBromleyRaw} from \"./mollweide.js\";\n\nexport var bromleyRaw = mollweideBromleyRaw(1, 4 / pi, pi);\n\nexport default function() {\n  return projection(bromleyRaw)\n      .scale(152.63);\n}\n","import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math.js\";\nimport {solve2d} from \"./newton.js\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda), r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\n\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\n  ];\n\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n      beta2 = pi - beta0;\n\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n\n  var mean = [\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\n  ];\n\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        v = new Array(3), i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n\n  return forward;\n}\n\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\n\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\n      .scale(380)\n      .center([22.5, 2]);\n}\n\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\n      R = [-c[0], -c[1]],\n      r = rotation(R),\n      f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\n  f.invert = solve2d(f);\n  var p = projection(f).rotate(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, pi, sin, sqrt, sqrtPi} from \"./math.js\";\n\nexport function collignonRaw(lambda, phi) {\n  var alpha = sqrt(1 - sin(phi));\n  return [(2 / sqrtPi) * lambda * alpha, sqrtPi * (1 - alpha)];\n}\n\ncollignonRaw.invert = function(x, y) {\n  var lambda = (lambda = y / sqrtPi - 1) * lambda;\n  return [lambda > 0 ? x * sqrt(pi / lambda) / 2 : 0, asin(1 - lambda)];\n};\n\nexport default function() {\n  return projection(collignonRaw)\n      .scale(95.6464)\n      .center([0, 30]);\n}\n","import {asin, atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function craigRaw(phi0) {\n  var tanPhi0 = tan(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda, (lambda ? lambda / sin(lambda) : 1) * (sin(phi) * cos(lambda) - tanPhi0 * cos(phi))];\n  }\n\n  forward.invert = tanPhi0 ? function(x, y) {\n    if (x) y *= sin(x) / x;\n    var cosLambda = cos(x);\n    return [x, 2 * atan2(sqrt(cosLambda * cosLambda + tanPhi0 * tanPhi0 - y * y) - cosLambda, tanPhi0 - y)];\n  } : function(x, y) {\n    return [x, asin(x ? y * tan(x) / x : y)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(craigRaw)\n      .scale(249.828)\n      .clipAngle(90);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt, sqrtPi} from \"./math.js\";\n\nvar sqrt3 = sqrt(3);\n\nexport function crasterRaw(lambda, phi) {\n  return [sqrt3 * lambda * (2 * cos(2 * phi / 3) - 1) / sqrtPi, sqrt3 * sqrtPi * sin(phi / 3)];\n}\n\ncrasterRaw.invert = function(x, y) {\n  var phi = 3 * asin(y / (sqrt3 * sqrtPi));\n  return [sqrtPi * x / (sqrt3 * (2 * cos(2 * phi / 3) - 1)), phi];\n};\n\nexport default function() {\n  return projection(crasterRaw)\n      .scale(156.19);\n}\n","import {asin, cos, sin} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalEqualAreaRaw)\n      .parallel(38.58) // acos(sqrt(width / height / pi)) * radians\n      .scale(195.044); // width / (sqrt(width / height / pi) * 2 * pi)\n}\n","import {atan, cos, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function cylindricalStereographicRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (1 + cosPhi0) * tan(phi / 2)];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, atan(y / (1 + cosPhi0)) * 2];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(cylindricalStereographicRaw)\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, pi, sqrt} from \"./math.js\";\n\nexport function eckert1Raw(lambda, phi) {\n  var alpha = sqrt(8 / (3 * pi));\n  return [\n    alpha * lambda * (1 - abs(phi) / pi),\n    alpha * phi\n  ];\n}\n\neckert1Raw.invert = function(x, y) {\n  var alpha = sqrt(8 / (3 * pi)),\n      phi = y / alpha;\n  return [\n    x / (alpha * (1 - abs(phi) / pi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert1Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, pi, sign, sin, sqrt} from \"./math.js\";\n\nexport function eckert2Raw(lambda, phi) {\n  var alpha = sqrt(4 - 3 * sin(abs(phi)));\n  return [\n    2 / sqrt(6 * pi) * lambda * alpha,\n    sign(phi) * sqrt(2 * pi / 3) * (2 - alpha)\n  ];\n}\n\neckert2Raw.invert = function(x, y) {\n  var alpha = 2 - abs(y) / sqrt(2 * pi / 3);\n  return [\n    x * sqrt(6 * pi) / (2 * alpha),\n    sign(y) * asin((4 - alpha * alpha) / 3)\n  ];\n};\n\nexport default function() {\n  return projection(eckert2Raw)\n      .scale(165.664);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math.js\";\n\nexport function eckert3Raw(lambda, phi) {\n  var k = sqrt(pi * (4 + pi));\n  return [\n    2 / k * lambda * (1 + sqrt(1 - 4 * phi * phi / (pi * pi))),\n    4 / k * phi\n  ];\n}\n\neckert3Raw.invert = function(x, y) {\n  var k = sqrt(pi * (4 + pi)) / 2;\n  return [\n    x * k / (1 + sqrt(1 - y * y * (4 + pi) / (4 * pi))),\n    y * k / 2\n  ];\n};\n\nexport default function() {\n  return projection(eckert3Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert4Raw(lambda, phi) {\n  var k = (2 + halfPi) * sin(phi);\n  phi /= 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    var cosPhi = cos(phi);\n    phi -= delta = (phi + sin(phi) * (cosPhi + 2) - k) / (2 * cosPhi * (1 + cosPhi));\n  }\n  return [\n    2 / sqrt(pi * (4 + pi)) * lambda * (1 + cos(phi)),\n    2 * sqrt(pi / (4 + pi)) * sin(phi)\n  ];\n}\n\neckert4Raw.invert = function(x, y) {\n  var A = y * sqrt((4 + pi) / pi) / 2,\n      k = asin(A),\n      c = cos(k);\n  return [\n    x / (2 / sqrt(pi * (4 + pi)) * (1 + c)),\n    asin((k + A * (c + 2)) / (2 + halfPi))\n  ];\n};\n\nexport default function() {\n  return projection(eckert4Raw)\n      .scale(180.739);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {cos, pi, sqrt} from \"./math.js\";\n\nexport function eckert5Raw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / sqrt(2 + pi),\n    2 * phi / sqrt(2 + pi)\n  ];\n}\n\neckert5Raw.invert = function(x, y) {\n  var k = sqrt(2 + pi),\n      phi = y * k / 2;\n  return [\n    k * x / (1 + cos(phi)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(eckert5Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function eckert6Raw(lambda, phi) {\n  var k = (1 + halfPi) * sin(phi);\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; i++) {\n    phi -= delta = (phi + sin(phi) - k) / (1 + cos(phi));\n  }\n  k = sqrt(2 + pi);\n  return [\n    lambda * (1 + cos(phi)) / k,\n    2 * phi / k\n  ];\n}\n\neckert6Raw.invert = function(x, y) {\n  var j = 1 + halfPi,\n      k = sqrt(j / 2);\n  return [\n    x * 2 * k / (1 + cos(y *= k)),\n    asin((y + sin(y)) / j)\n  ];\n};\n\nexport default function() {\n  return projection(eckert6Raw)\n      .scale(173.044);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {augustRaw} from \"./august.js\";\nimport {abs, atan, cos, epsilon, halfPi, log, max, min, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nvar eisenlohrK = 3 + 2 * sqrt2;\n\nexport function eisenlohrRaw(lambda, phi) {\n  var s0 = sin(lambda /= 2),\n      c0 = cos(lambda),\n      k = sqrt(cos(phi)),\n      c1 = cos(phi /= 2),\n      t = sin(phi) / (c1 + sqrt2 * c0 * k),\n      c = sqrt(2 / (1 + t * t)),\n      v = sqrt((sqrt2 * c1 + (c0 + s0) * k) / (sqrt2 * c1 + (c0 - s0) * k));\n  return [\n    eisenlohrK * (c * (v - 1 / v) - 2 * log(v)),\n    eisenlohrK * (c * t * (v + 1 / v) - 2 * atan(t))\n  ];\n}\n\neisenlohrRaw.invert = function(x, y) {\n  if (!(p = augustRaw.invert(x / 1.2, y * 1.065))) return null;\n  var lambda = p[0], phi = p[1], i = 20, p;\n  x /= eisenlohrK, y /= eisenlohrK;\n  do {\n    var _0 = lambda / 2,\n        _1 = phi / 2,\n        s0 = sin(_0),\n        c0 = cos(_0),\n        s1 = sin(_1),\n        c1 = cos(_1),\n        cos1 = cos(phi),\n        k = sqrt(cos1),\n        t = s1 / (c1 + sqrt2 * c0 * k),\n        t2 = t * t,\n        c = sqrt(2 / (1 + t2)),\n        v0 = (sqrt2 * c1 + (c0 + s0) * k),\n        v1 = (sqrt2 * c1 + (c0 - s0) * k),\n        v2 = v0 / v1,\n        v = sqrt(v2),\n        vm1v = v - 1 / v,\n        vp1v = v + 1 / v,\n        fx = c * vm1v - 2 * log(v) - x,\n        fy = c * t * vp1v - 2 * atan(t) - y,\n        deltatDeltaLambda = s1 && sqrt1_2 * k * s0 * t2 / s1,\n        deltatDeltaPhi = (sqrt2 * c0 * c1 + k) / (2 * (c1 + sqrt2 * c0 * k) * (c1 + sqrt2 * c0 * k) * k),\n        deltacDeltat = -0.5 * t * c * c * c,\n        deltacDeltaLambda = deltacDeltat * deltatDeltaLambda,\n        deltacDeltaPhi = deltacDeltat * deltatDeltaPhi,\n        A = (A = 2 * c1 + sqrt2 * k * (c0 - s0)) * A * v,\n        deltavDeltaLambda = (sqrt2 * c0 * c1 * k + cos1) / A,\n        deltavDeltaPhi = -(sqrt2 * s0 * s1) / (k * A),\n        deltaxDeltaLambda = vm1v * deltacDeltaLambda - 2 * deltavDeltaLambda / v + c * (deltavDeltaLambda + deltavDeltaLambda / v2),\n        deltaxDeltaPhi = vm1v * deltacDeltaPhi - 2 * deltavDeltaPhi / v + c * (deltavDeltaPhi + deltavDeltaPhi / v2),\n        deltayDeltaLambda = t * vp1v * deltacDeltaLambda - 2 * deltatDeltaLambda / (1 + t2) + c * vp1v * deltatDeltaLambda + c * t * (deltavDeltaLambda - deltavDeltaLambda / v2),\n        deltayDeltaPhi = t * vp1v * deltacDeltaPhi - 2 * deltatDeltaPhi / (1 + t2) + c * vp1v * deltatDeltaPhi + c * t * (deltavDeltaPhi - deltavDeltaPhi / v2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n    if (!denominator) break;\n    var deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda;\n    phi = max(-halfPi, min(halfPi, phi - deltaPhi));\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return abs(abs(phi) - halfPi) < epsilon ? [0, phi] : i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(eisenlohrRaw)\n      .scale(62.5271);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, radians, sqrt, tan} from \"./math.js\";\n\nvar faheyK = cos(35 * radians);\n\nexport function faheyRaw(lambda, phi) {\n  var t = tan(phi / 2);\n  return [lambda * faheyK * sqrt(1 - t * t), (1 + faheyK) * t];\n}\n\nfaheyRaw.invert = function(x, y) {\n  var t = y / (1 + faheyK);\n  return [x && x / (faheyK * sqrt(1 - t * t)), 2 * atan(t)];\n};\n\nexport default function() {\n  return projection(faheyRaw)\n      .scale(137.152);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, cos, sqrtPi, tan} from \"./math.js\";\n\nexport function foucautRaw(lambda, phi) {\n  var k = phi / 2, cosk = cos(k);\n  return [ 2 * lambda / sqrtPi * cos(phi) * cosk * cosk, sqrtPi * tan(k)];\n}\n\nfoucautRaw.invert = function(x, y) {\n  var k = atan(y / sqrtPi), cosk = cos(k), phi = 2 * k;\n  return [x * sqrtPi / 2 / (cos(phi) * cosk * cosk), phi];\n};\n\nexport default function() {\n  return projection(foucautRaw)\n      .scale(135.264);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {cos, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport {solve} from \"./newton.js\";\n\nexport function foucautSinusoidalRaw(alpha) {\n  var beta = 1 - alpha,\n      equatorial = raw(pi, 0)[0] - raw(-pi, 0)[0],\n      polar = raw(0, halfPi)[1] - raw(0, -halfPi)[1],\n      ratio = sqrt(2 * polar / equatorial);\n\n  function raw(lambda, phi) {\n    var cosphi = cos(phi),\n        sinphi = sin(phi);\n    return [\n      cosphi / (beta + alpha * cosphi) * lambda,\n      beta * phi + alpha * sinphi\n    ];\n  }\n\n  function forward(lambda, phi) {\n    var p = raw(lambda, phi);\n    return [p[0] * ratio, p[1] / ratio];\n  }\n\n  function forwardMeridian(phi) {\n    return forward(0, phi)[1];\n  }\n\n  forward.invert = function(x, y) {\n    var phi = solve(forwardMeridian, y),\n        lambda = x / ratio * (alpha + beta / cos(phi));\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var alpha = 0.5,\n      m = projectionMutator(foucautSinusoidalRaw),\n      p = m(alpha);\n\n  p.alpha = function(_) {\n    return arguments.length ? m(alpha = +_) : alpha;\n  };\n\n  return p\n      .scale(168.725);\n}\n","import {geoEquirectangular, geoOrthographic} from \"d3-geo\";\nimport {asin, atan, degrees, radians, sin, tan} from \"./math.js\";\n\nfunction gilbertForward(point) {\n  return [point[0] / 2, asin(tan(point[1] / 2 * radians)) * degrees];\n}\n\nfunction gilbertInvert(point) {\n  return [point[0] * 2, 2 * atan(sin(point[1] * radians)) * degrees];\n}\n\nexport default function(projectionType) {\n  if (projectionType == null) projectionType = geoOrthographic;\n  var projection = projectionType(),\n      equirectangular = geoEquirectangular().scale(degrees).precision(0).clipAngle(null).translate([0, 0]); // antimeridian cutting\n\n  function gilbert(point) {\n    return projection(gilbertForward(point));\n  }\n\n  if (projection.invert) gilbert.invert = function(point) {\n    return gilbertInvert(projection.invert(point));\n  };\n\n  gilbert.stream = function(stream) {\n    var s1 = projection.stream(stream), s0 = equirectangular.stream({\n      point: function(lambda, phi) { s1.point(lambda / 2, asin(tan(-phi / 2 * radians)) * degrees); },\n      lineStart: function() { s1.lineStart(); },\n      lineEnd: function() { s1.lineEnd(); },\n      polygonStart: function() { s1.polygonStart(); },\n      polygonEnd: function() { s1.polygonEnd(); }\n    });\n    s0.sphere = s1.sphere;\n    return s0;\n  };\n\n  function property(name) {\n    gilbert[name] = function() {\n      return arguments.length ? (projection[name].apply(projection, arguments), gilbert) : projection[name]();\n    };\n  }\n\n  gilbert.rotate = function(_) {\n    return arguments.length ? (equirectangular.rotate(_), gilbert) : equirectangular.rotate();\n  };\n\n  gilbert.center = function(_) {\n    return arguments.length ? (projection.center(gilbertForward(_)), gilbert) : gilbertInvert(projection.center());\n  };\n\n  property(\"angle\");\n  property(\"clipAngle\");\n  property(\"clipExtent\");\n  property(\"fitExtent\");\n  property(\"fitHeight\");\n  property(\"fitSize\");\n  property(\"fitWidth\");\n  property(\"scale\");\n  property(\"translate\");\n  property(\"precision\");\n\n  return gilbert\n      .scale(249.5);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, degrees, epsilon, epsilon2, halfPi, pi, radians, round, sin, sqrt} from \"./math.js\";\n\nexport function gingeryRaw(rho, n) {\n  var k = 2 * pi / n,\n      rho2 = rho * rho;\n\n  function forward(lambda, phi) {\n    var p = azimuthalEquidistantRaw(lambda, phi),\n        x = p[0],\n        y = p[1],\n        r2 = x * x + y * y;\n\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          alpha = theta - theta0,\n          rhoCosAlpha = rho * cos(alpha),\n          k_ = (rho * sin(alpha) - alpha * sin(rhoCosAlpha)) / (halfPi - rhoCosAlpha),\n          s_ = gingeryLength(alpha, k_),\n          e = (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n\n      x = r;\n      var i = 50, delta;\n      do {\n        x -= delta = (rho + gingeryIntegrate(s_, rhoCosAlpha, x) * e - r) / (s_(x) * e);\n      } while (abs(delta) > epsilon && --i > 0);\n\n      y = alpha * sin(x);\n      if (x < halfPi) y -= k_ * (x - halfPi);\n\n      var s = sin(theta0),\n          c = cos(theta0);\n      p[0] = x * c - y * s;\n      p[1] = x * s + y * c;\n    }\n    return p;\n  }\n\n  forward.invert = function(x, y) {\n    var r2 = x * x + y * y;\n    if (r2 > rho2) {\n      var r = sqrt(r2),\n          theta = atan2(y, x),\n          theta0 = k * round(theta / k),\n          dTheta = theta - theta0;\n\n      x = r * cos(dTheta);\n      y = r * sin(dTheta);\n\n      var x_halfPi = x - halfPi,\n          sinx = sin(x),\n          alpha = y / sinx,\n          delta = x < halfPi ? Infinity : 0,\n          i = 10;\n\n      while (true) {\n        var rhosinAlpha = rho * sin(alpha),\n            rhoCosAlpha = rho * cos(alpha),\n            sinRhoCosAlpha = sin(rhoCosAlpha),\n            halfPi_RhoCosAlpha = halfPi - rhoCosAlpha,\n            k_ = (rhosinAlpha - alpha * sinRhoCosAlpha) / halfPi_RhoCosAlpha,\n            s_ = gingeryLength(alpha, k_);\n\n        if (abs(delta) < epsilon2 || !--i) break;\n\n        alpha -= delta = (alpha * sinx - k_ * x_halfPi - y) / (\n          sinx - x_halfPi * 2 * (\n            halfPi_RhoCosAlpha * (rhoCosAlpha + alpha * rhosinAlpha * cos(rhoCosAlpha) - sinRhoCosAlpha) -\n            rhosinAlpha * (rhosinAlpha - alpha * sinRhoCosAlpha)\n          ) / (halfPi_RhoCosAlpha * halfPi_RhoCosAlpha));\n      }\n      r = rho + gingeryIntegrate(s_, rhoCosAlpha, x) * (pi - rho) / gingeryIntegrate(s_, rhoCosAlpha, pi);\n      theta = theta0 + alpha;\n      x = r * cos(theta);\n      y = r * sin(theta);\n    }\n    return azimuthalEquidistantRaw.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction gingeryLength(alpha, k) {\n  return function(x) {\n    var y_ = alpha * cos(x);\n    if (x < halfPi) y_ -= k;\n    return sqrt(1 + y_ * y_);\n  };\n}\n\n// Numerical integration: trapezoidal rule.\nfunction gingeryIntegrate(f, a, b) {\n  var n = 50,\n      h = (b - a) / n,\n      s = f(a) + f(b);\n  for (var i = 1, x = a; i < n; ++i) s += 2 * f(x += h);\n  return s * 0.5 * h;\n}\n\nexport default function() {\n  var n = 6,\n      rho = 30 * radians,\n      cRho = cos(rho),\n      sRho = sin(rho),\n      m = projectionMutator(gingeryRaw),\n      p = m(rho, n),\n      stream_ = p.stream,\n      epsilon = 1e-2,\n      cr = -cos(epsilon * radians),\n      sr = sin(epsilon * radians);\n\n  p.radius = function(_) {\n    if (!arguments.length) return rho * degrees;\n    cRho = cos(rho = _ * radians);\n    sRho = sin(rho);\n    return m(rho, n);\n  };\n\n  p.lobes = function(_) {\n    if (!arguments.length) return n;\n    return m(rho, n = +_);\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart(), sphereStream.lineStart();\n      for (var i = 0, delta = 2 * pi / n, phi = 0; i < n; ++i, phi -= delta) {\n        sphereStream.point(atan2(sr * cos(phi), cr) * degrees, asin(sr * sin(phi)) * degrees);\n        sphereStream.point(atan2(sRho * cos(phi - delta / 2), cRho) * degrees, asin(sRho * sin(phi - delta / 2)) * degrees);\n      }\n      sphereStream.lineEnd(), sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return p\n      .rotate([90, -40])\n      .scale(91.7095)\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, asin, cos, epsilon, pi, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b, c, d, e, f, g, h) {\n  if (arguments.length < 8) h = 0;\n\n  function forward(lambda, phi) {\n    if (!phi) return [a * lambda / pi, 0];\n    var phi2 = phi * phi,\n        xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n        yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n        m = (xB * xB + yB * yB) / (2 * yB),\n        alpha = lambda * asin(xB / m) / pi;\n    return [m * sin(alpha), phi * (1 + phi2 * h) + m * (1 - cos(alpha))];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda = pi * x / a,\n        phi = y,\n        deltaLambda, deltaPhi, i = 50;\n    do {\n      var phi2 = phi * phi,\n          xB = a + phi2 * (b + phi2 * (c + phi2 * d)),\n          yB = phi * (e - 1 + phi2 * (f - h + phi2 * g)),\n          p = xB * xB + yB * yB,\n          q = 2 * yB,\n          m = p / q,\n          m2 = m * m,\n          dAlphadLambda = asin(xB / m) / pi,\n          alpha = lambda * dAlphadLambda,\n          xB2 = xB * xB,\n          dxBdPhi = (2 * b + phi2 * (4 * c + phi2 * 6 * d)) * phi,\n          dyBdPhi = e + phi2 * (3 * f + phi2 * 5 * g),\n          dpdPhi = 2 * (xB * dxBdPhi + yB * (dyBdPhi - 1)),\n          dqdPhi = 2 * (dyBdPhi - 1),\n          dmdPhi = (dpdPhi * q - p * dqdPhi) / (q * q),\n          cosAlpha = cos(alpha),\n          sinAlpha = sin(alpha),\n          mcosAlpha = m * cosAlpha,\n          msinAlpha = m * sinAlpha,\n          dAlphadPhi = ((lambda / pi) * (1 / sqrt(1 - xB2 / m2)) * (dxBdPhi * m - xB * dmdPhi)) / m2,\n          fx = msinAlpha - x,\n          fy = phi * (1 + phi2 * h) + m - mcosAlpha - y,\n          deltaxDeltaPhi = dmdPhi * sinAlpha + mcosAlpha * dAlphadPhi,\n          deltaxDeltaLambda = mcosAlpha * dAlphadLambda,\n          deltayDeltaPhi = 1 + dmdPhi - (dmdPhi * cosAlpha - msinAlpha * dAlphadPhi),\n          deltayDeltaLambda = msinAlpha * dAlphadLambda,\n          denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda;\n      if (!denominator) break;\n      lambda -= deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator;\n      phi -= deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n    return [lambda, phi];\n  };\n\n  return forward;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg4Raw = ginzburgPolyconicRaw(2.8284, -1.6988, 0.75432, -0.18071, 1.76003, -0.38914, 0.042555);\n\nexport default function() {\n  return projection(ginzburg4Raw)\n      .scale(149.995);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg5Raw = ginzburgPolyconicRaw(2.583819, -0.835827, 0.170354, -0.038094, 1.543313, -0.411435,0.082742);\n\nexport default function() {\n  return projection(ginzburg5Raw)\n      .scale(153.93);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\nimport {pi} from \"./math.js\";\n\nexport var ginzburg6Raw = ginzburgPolyconicRaw(5 / 6 * pi, -0.62636, -0.0344, 0, 1.3493, -0.05524, 0, 0.045);\n\nexport default function() {\n  return projection(ginzburg6Raw)\n      .scale(130.945);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\nexport function ginzburg8Raw(lambda, phi) {\n  var lambda2 = lambda * lambda,\n      phi2 = phi * phi;\n  return [\n    lambda * (1 - 0.162388 * phi2) * (0.87 - 0.000952426 * lambda2 * lambda2),\n    phi * (1 + phi2 / 12)\n  ];\n}\n\nginzburg8Raw.invert = function(x, y) {\n  var lambda = x,\n      phi = y,\n      i = 50, delta;\n  do {\n    var phi2 = phi * phi;\n    phi -= delta = (phi * (1 + phi2 / 12) - y) / (1 + phi2 / 4);\n  } while (abs(delta) > epsilon && --i > 0);\n  i = 50;\n  x /= 1 -0.162388 * phi2;\n  do {\n    var lambda4 = (lambda4 = lambda * lambda) * lambda4;\n    lambda -= delta = (lambda * (0.87 - 0.000952426 * lambda4) - x) / (0.87 - 0.00476213 * lambda4);\n  } while (abs(delta) > epsilon && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(ginzburg8Raw)\n      .scale(131.747);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport ginzburgPolyconicRaw from \"./ginzburgPolyconic.js\";\n\nexport var ginzburg9Raw = ginzburgPolyconicRaw(2.6516, -0.76534, 0.19123, -0.047094, 1.36289, -0.13965,0.031762);\n\nexport default function() {\n  return projection(ginzburg9Raw)\n      .scale(131.087);\n}\n","import {halfPi, pi} from \"./math.js\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectSquare(lambda, phi) {\n    var s = lambda > 0 ? -0.5 : 0.5,\n        point = project(lambda + s * pi, phi);\n    point[0] -= s * dx;\n    return point;\n  }\n\n  if (project.invert) projectSquare.invert = function(x, y) {\n    var s = x > 0 ? -0.5 : 0.5,\n        location = project.invert(x + s * dx, y),\n        lambda = location[0] - s * pi;\n    if (lambda < -pi) lambda += 2 * pi;\n    else if (lambda > pi) lambda -= 2 * pi;\n    location[0] = lambda;\n    return location;\n  };\n\n  return projectSquare;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan2, cos, sign, epsilon, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function gringortenRaw(lambda, phi) {\n  var sLambda = sign(lambda),\n      sPhi = sign(phi),\n      cosPhi = cos(phi),\n      x = cos(lambda) * cosPhi,\n      y = sin(lambda) * cosPhi,\n      z = sin(sPhi * phi);\n  lambda = abs(atan2(y, z));\n  phi = asin(x);\n  if (abs(lambda - halfPi) > epsilon) lambda %= halfPi;\n  var point = gringortenHexadecant(lambda > pi / 4 ? halfPi - lambda : lambda, phi);\n  if (lambda > pi / 4) z = point[0], point[0] = -point[1], point[1] = -z;\n  return (point[0] *= sLambda, point[1] *= -sPhi, point);\n}\n\ngringortenRaw.invert = function(x, y) {\n  if (abs(x) > 1) x = sign(x) * 2 - x;\n  if (abs(y) > 1) y = sign(y) * 2 - y;\n  var sx = sign(x),\n      sy = sign(y),\n      x0 = -sx * x,\n      y0 = -sy * y,\n      t = y0 / x0 < 1,\n      p = gringortenHexadecantInvert(t ? y0 : x0, t ? x0 : y0),\n      lambda = p[0],\n      phi = p[1],\n      cosPhi = cos(phi);\n  if (t) lambda = -halfPi - lambda;\n  return [sx * (atan2(sin(lambda) * cosPhi, -sin(phi)) + pi), sy * asin(cos(lambda) * cosPhi)];\n};\n\nfunction gringortenHexadecant(lambda, phi) {\n  if (phi === halfPi) return [0, 0];\n\n  var sinPhi = sin(phi),\n      r = sinPhi * sinPhi,\n      r2 = r * r,\n      j = 1 + r2,\n      k = 1 + 3 * r2,\n      q = 1 - r2,\n      z = asin(1 / sqrt(j)),\n      v = q + r * j * z,\n      p2 = (1 - sinPhi) / v,\n      p = sqrt(p2),\n      a2 = p2 * j,\n      a = sqrt(a2),\n      h = p * q,\n      x,\n      i;\n\n  if (lambda === 0) return [0, -(h + r * a)];\n\n  var cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * k) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = (0.5 * dp2dPhi) / p,\n      dhdPhi = q * dpdPhi - 2 * r * p * drdPhi,\n      dra2dPhi = r * j * dp2dPhi + p2 * k * drdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * dra2dPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      lambda1 = 4 * lambda / pi,\n      delta;\n\n  // Slower but accurate bisection method.\n  if (lambda > 0.222 * pi || phi < pi / 4 && lambda > 0.175 * pi) {\n    x = (h + r * sqrt(a2 * (1 + r2) - h * h)) / (1 + r2);\n    if (lambda > pi / 4) return [x, x];\n    var x1 = x, x0 = 0.5 * x;\n    x = 0.5 * (x0 + x1), i = 50;\n    do {\n      var g = sqrt(a2 - x * x),\n          f = (x * (zeta + mu * g) + nu * asin(x / a)) - lambda1;\n      if (!f) break;\n      if (f < 0) x0 = x;\n      else x1 = x;\n      x = 0.5 * (x0 + x1);\n    } while (abs(x1 - x0) > epsilon && --i > 0);\n  }\n\n  // Newton-Raphson.\n  else {\n    x = epsilon, i = 25;\n    do {\n      var x2 = x * x,\n          g2 = sqrt(a2 - x2),\n          zetaMug = zeta + mu * g2,\n          f2 = x * zetaMug + nu * asin(x / a) - lambda1,\n          df = zetaMug + (nu - mu * x2) / g2;\n      x -= delta = g2 ? f2 / df : 0;\n    } while (abs(delta) > epsilon && --i > 0);\n  }\n\n  return [x, -h - r * sqrt(a2 - x * x)];\n}\n\nfunction gringortenHexadecantInvert(x, y) {\n  var x0 = 0,\n      x1 = 1,\n      r = 0.5,\n      i = 50;\n\n  while (true) {\n    var r2 = r * r,\n        sinPhi = sqrt(r),\n        z = asin(1 / sqrt(1 + r2)),\n        v = (1 - r2) + r * (1 + r2) * z,\n        p2 = (1 - sinPhi) / v,\n        p = sqrt(p2),\n        a2 = p2 * (1 + r2),\n        h = p * (1 - r2),\n        g2 = a2 - x * x,\n        g = sqrt(g2),\n        y0 = y + h + r * g;\n    if (abs(x1 - x0) < epsilon2 || --i === 0 || y0 === 0) break;\n    if (y0 > 0) x0 = r;\n    else x1 = r;\n    r = 0.5 * (x0 + x1);\n  }\n\n  if (!i) return null;\n\n  var phi = asin(sinPhi),\n      cosPhi = cos(phi),\n      secPhi = 1 / cosPhi,\n      drdPhi = 2 * sinPhi * cosPhi,\n      dvdPhi = (-3 * r + z * (1 + 3 * r2)) * drdPhi,\n      dp2dPhi = (-v * cosPhi - (1 - sinPhi) * dvdPhi) / (v * v),\n      dpdPhi = 0.5 * dp2dPhi / p,\n      dhdPhi = (1 - r2) * dpdPhi - 2 * r * p * drdPhi,\n      zeta = -2 * secPhi * dhdPhi,\n      mu = -secPhi * drdPhi,\n      nu = -secPhi * (r * (1 + r2) * dp2dPhi + p2 * (1 + 3 * r2) * drdPhi);\n\n  return [pi / 4 * (x * (zeta + mu * g) + nu * asin(x / sqrt(a2))), phi];\n}\n\nexport default function() {\n  return projection(squareRaw(gringortenRaw))\n      .scale(239.75);\n}\n","import {abs, asin, atan, cos, cosh, epsilon, exp, halfPi, log, pi, pow, quarterPi, sign, sin, sinh, sqrt, tan, tanh} from \"./math.js\";\n\n// Returns [sn, cn, dn](u + iv|m).\nexport function ellipticJi(u, v, m) {\n  var a, b, c;\n  if (!u) {\n    b = ellipticJ(v, 1 - m);\n    return [\n      [0, b[0] / b[1]],\n      [1 / b[1], 0],\n      [b[2] / b[1], 0]\n    ];\n  }\n  a = ellipticJ(u, m);\n  if (!v) return [[a[0], 0], [a[1], 0], [a[2], 0]];\n  b = ellipticJ(v, 1 - m);\n  c = b[1] * b[1] + m * a[0] * a[0] * b[0] * b[0];\n  return [\n    [a[0] * b[2] / c, a[1] * a[2] * b[0] * b[1] / c],\n    [a[1] * b[1] / c, -a[0] * a[2] * b[0] * b[2] / c],\n    [a[2] * b[1] * b[2] / c, -m * a[0] * a[1] * b[0] / c]\n  ];\n}\n\n// Returns [sn, cn, dn, ph](u|m).\nexport function ellipticJ(u, m) {\n  var ai, b, phi, t, twon;\n  if (m < epsilon) {\n    t = sin(u);\n    b = cos(u);\n    ai = m * (u - t * b) / 4;\n    return [\n      t - ai * b,\n      b + ai * t,\n      1 - m * t * t / 2,\n      u - ai\n    ];\n  }\n  if (m >= 1 - epsilon) {\n    ai = (1 - m) / 4;\n    b = cosh(u);\n    t = tanh(u);\n    phi = 1 / b;\n    twon = b * sinh(u);\n    return [\n      t + ai * (twon - u) / (b * b),\n      phi - ai * t * phi * (twon - u),\n      phi + ai * t * phi * (twon + u),\n      2 * atan(exp(u)) - halfPi + ai * (twon - u) / b\n    ];\n  }\n\n  var a = [1, 0, 0, 0, 0, 0, 0, 0, 0],\n      c = [sqrt(m), 0, 0, 0, 0, 0, 0, 0, 0],\n      i = 0;\n  b = sqrt(1 - m);\n  twon = 1;\n\n  while (abs(c[i] / a[i]) > epsilon && i < 8) {\n    ai = a[i++];\n    c[i] = (ai - b) / 2;\n    a[i] = (ai + b) / 2;\n    b = sqrt(ai * b);\n    twon *= 2;\n  }\n\n  phi = twon * a[i] * u;\n  do {\n    t = c[i] * sin(b = phi) / a[i];\n    phi = (asin(t) + phi) / 2;\n  } while (--i);\n\n  return [sin(phi), t = cos(phi), t / cos(phi - b), phi];\n}\n\n// Calculate F(phi+iPsi|m).\n// See Abramowitz and Stegun, 17.4.11.\nexport function ellipticFi(phi, psi, m) {\n  var r = abs(phi),\n      i = abs(psi),\n      sinhPsi = sinh(i);\n  if (r) {\n    var cscPhi = 1 / sin(r),\n        cotPhi2 = 1 / (tan(r) * tan(r)),\n        b = -(cotPhi2 + m * (sinhPsi * sinhPsi * cscPhi * cscPhi) - 1 + m),\n        c = (m - 1) * cotPhi2,\n        cotLambda2 = (-b + sqrt(b * b - 4 * c)) / 2;\n    return [\n      ellipticF(atan(1 / sqrt(cotLambda2)), m) * sign(phi),\n      ellipticF(atan(sqrt((cotLambda2 / cotPhi2 - 1) / m)), 1 - m) * sign(psi)\n    ];\n  }\n  return [\n    0,\n    ellipticF(atan(sinhPsi), 1 - m) * sign(psi)\n  ];\n}\n\n// Calculate F(phi|m) where m = k² = sin²α.\n// See Abramowitz and Stegun, 17.6.7.\nexport function ellipticF(phi, m) {\n  if (!m) return phi;\n  if (m === 1) return log(tan(phi / 2 + quarterPi));\n  var a = 1,\n      b = sqrt(1 - m),\n      c = sqrt(m);\n  for (var i = 0; abs(c) > epsilon; i++) {\n    if (phi % pi) {\n      var dPhi = atan(b * tan(phi) / a);\n      if (dPhi < 0) dPhi += pi;\n      phi += dPhi + ~~(phi / pi) * pi;\n    } else phi += phi;\n    c = (a + b) / 2;\n    b = sqrt(a * b);\n    c = ((a = c) - b) / 2;\n  }\n  return phi / (pow(2, i) * a);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {ellipticF, ellipticFi, ellipticJi} from \"./elliptic.js\";\nimport {abs, atan, atan2, cos, exp, halfPi, log, pi, sin, sqrt, sqrt2, tan} from \"./math.js\";\nimport squareRaw from \"./square.js\";\n\nexport function guyouRaw(lambda, phi) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      psi = log(tan(pi / 4 + abs(phi) / 2)),\n      r = exp(f * psi) / sqrt(k_),\n      at = guyouComplexAtan(r * cos(f * lambda), r * sin(f * lambda)),\n      t = ellipticFi(at[0], at[1], k * k);\n  return [-t[1], (phi >= 0 ? 1 : -1) * (0.5 * K - t[0])];\n}\n\nfunction guyouComplexAtan(x, y) {\n  var x2 = x * x,\n      y_1 = y + 1,\n      t = 1 - x2 - y * y;\n  return [\n   0.5 * ((x >= 0 ? halfPi : -halfPi) - atan2(t, 2 * x)),\n    -0.25 * log(t * t + 4 * x2) +0.5 * log(y_1 * y_1 + x2)\n  ];\n}\n\nfunction guyouComplexDivide(a, b) {\n  var denominator = b[0] * b[0] + b[1] * b[1];\n  return [\n    (a[0] * b[0] + a[1] * b[1]) / denominator,\n    (a[1] * b[0] - a[0] * b[1]) / denominator\n  ];\n}\n\nguyouRaw.invert = function(x, y) {\n  var k_ = (sqrt2 - 1) / (sqrt2 + 1),\n      k = sqrt(1 - k_ * k_),\n      K = ellipticF(halfPi, k * k),\n      f = -1,\n      j = ellipticJi(0.5 * K - y, -x, k * k),\n      tn = guyouComplexDivide(j[0], j[1]),\n      lambda = atan2(tn[1], tn[0]) / f;\n  return [\n    lambda,\n    2 * atan(exp(0.5 / f * log(k_ * tn[0] * tn[0] + k_ * tn[1] * tn[1]))) - halfPi\n  ];\n};\n\nexport default function() {\n  return projection(squareRaw(guyouRaw))\n      .scale(151.496);\n}\n","import {geoProjectionMutator as projectionMutator, geoCircle} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, degrees, epsilon, halfPi, radians, sqrt, sin} from \"./math.js\";\n\nexport function hammerRetroazimuthalRaw(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0),\n      rotate = hammerRetroazimuthalRotation(phi0);\n\n  rotate.invert = hammerRetroazimuthalRotation(-phi0);\n\n  function forward(lambda, phi) {\n    var p = rotate(lambda, phi);\n    lambda = p[0], phi = p[1];\n    var sinPhi = sin(phi),\n        cosPhi = cos(phi),\n        cosLambda = cos(lambda),\n        z = acos(sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosLambda),\n        sinz = sin(z),\n        K = abs(sinz) > epsilon ? z / sinz : 1;\n    return [\n      K * cosPhi0 * sin(lambda),\n      (abs(lambda) > halfPi ? K : -K) // rotate for back hemisphere\n        * (sinPhi0 * cosPhi - cosPhi0 * sinPhi * cosLambda)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho = sqrt(x * x + y * y),\n        sinz = -sin(rho),\n        cosz = cos(rho),\n        a = rho * cosz,\n        b = -y * sinz,\n        c = rho * sinPhi0,\n        d = sqrt(a * a + b * b - c * c),\n        phi = atan2(a * c + b * d, b * c - a * d),\n        lambda = (rho > halfPi ? -1 : 1) * atan2(x * sinz, rho * cos(phi) * cosz + y * sin(phi) * sinz);\n    return rotate.invert(lambda, phi);\n  };\n\n  return forward;\n}\n\n// Latitudinal rotation by phi0.\n// Temporary hack until D3 supports arbitrary small-circle clipping origins.\nfunction hammerRetroazimuthalRotation(phi0) {\n  var sinPhi0 = sin(phi0),\n      cosPhi0 = cos(phi0);\n\n  return function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi);\n    return [\n      atan2(y, x * cosPhi0 - z * sinPhi0),\n      asin(z * cosPhi0 + x * sinPhi0)\n    ];\n  };\n}\n\nexport default function() {\n  var phi0 = 0,\n      m = projectionMutator(hammerRetroazimuthalRaw),\n      p = m(phi0),\n      rotate_ = p.rotate,\n      stream_ = p.stream,\n      circle = geoCircle();\n\n  p.parallel = function(_) {\n    if (!arguments.length) return phi0 * degrees;\n    var r = p.rotate();\n    return m(phi0 = _ * radians).rotate(r);\n  };\n\n  // Temporary hack; see hammerRetroazimuthalRotation.\n  p.rotate = function(_) {\n    if (!arguments.length) return (_ = rotate_.call(p), _[1] += phi0 * degrees, _);\n    rotate_.call(p, [_[0], _[1] - phi0 * degrees]);\n    circle.center([-_[0], -_[1]]);\n    return p;\n  };\n\n  p.stream = function(stream) {\n    stream = stream_(stream);\n    stream.sphere = function() {\n      stream.polygonStart();\n      var epsilon = 1e-2,\n          ring = circle.radius(90 - epsilon)().coordinates[0],\n          n = ring.length - 1,\n          i = -1,\n          p;\n      stream.lineStart();\n      while (++i < n) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      ring = circle.radius(90 + epsilon)().coordinates[0];\n      n = ring.length - 1;\n      stream.lineStart();\n      while (--i >= 0) stream.point((p = ring[i])[0], p[1]);\n      stream.lineEnd();\n      stream.polygonEnd();\n    };\n    return stream;\n  };\n\n  return p\n      .scale(79.4187)\n      .parallel(45)\n      .clipAngle(180 - 1e-3);\n}\n","import {range} from \"d3-array\";\nimport {geoStream, geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {collignonRaw} from \"./collignon.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\nimport {abs, asin, degrees, epsilon, floor, max, min, pi, radians, sqrtPi, tau} from \"./math.js\";\n\nvar K = 3,\n    healpixParallel = asin(1 - 1 / K) * degrees,\n    healpixLambert = cylindricalEqualAreaRaw(0);\n\nexport function healpixRaw(H) {\n  var phi0 = healpixParallel * radians,\n      dx = collignonRaw(pi, phi0)[0] - collignonRaw(-pi, phi0)[0],\n      y0 = healpixLambert(0, phi0)[1],\n      y1 = collignonRaw(0, phi0)[1],\n      dy1 = sqrtPi - y1,\n      k = tau / H,\n      w = 4 / tau,\n      h = y0 + (dy1 * dy1 * 4) / tau;\n\n  function forward(lambda, phi) {\n    var point,\n        phi2 = abs(phi);\n    if (phi2 > phi0) {\n      var i = min(H - 1, max(0, floor((lambda + pi) / k)));\n      lambda += pi * (H - 1) / H - i * k;\n      point = collignonRaw(lambda, phi2);\n      point[0] = point[0] * tau / dx - tau * (H - 1) / (2 * H) + i * tau / H;\n      point[1] = y0 + (point[1] - y1) * 4 * dy1 / tau;\n      if (phi < 0) point[1] = -point[1];\n    } else {\n      point = healpixLambert(lambda, phi);\n    }\n    point[0] *= w, point[1] /= h;\n    return point;\n  }\n\n  forward.invert = function(x, y) {\n    x /= w, y *= h;\n    var y2 = abs(y);\n    if (y2 > y0) {\n      var i = min(H - 1, max(0, floor((x + pi) / k)));\n      x = (x + pi * (H - 1) / H - i * k) * dx / tau;\n      var point = collignonRaw.invert(x, 0.25 * (y2 - y0) * tau / dy1 + y1);\n      point[0] -= pi * (H - 1) / H - i * k;\n      if (y < 0) point[1] = -point[1];\n      return point;\n    }\n    return healpixLambert.invert(x, y);\n  };\n\n  return forward;\n}\n\nfunction sphereTop(x, i) {\n  return [x, i & 1 ? 90 - epsilon : healpixParallel];\n}\n\nfunction sphereBottom(x, i) {\n  return [x, i & 1 ? -90 + epsilon : -healpixParallel];\n}\n\nfunction sphereNudge(d) {\n  return [d[0] * (1 - epsilon), d[1]];\n}\n\nfunction sphere(step) {\n  var c = [].concat(\n    range(-180, 180 + step / 2, step).map(sphereTop),\n    range(180, -180 - step / 2, -step).map(sphereBottom)\n  );\n  return {\n    type: \"Polygon\",\n    coordinates: [step === 180 ? c.map(sphereNudge) : c]\n  };\n}\n\nexport default function() {\n  var H = 4,\n      m = projectionMutator(healpixRaw),\n      p = m(H),\n      stream_ = p.stream;\n\n  p.lobes = function(_) {\n    return arguments.length ? m(H = +_) : H;\n  };\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere(180 / H), sphereStream); };\n    return rotateStream;\n  };\n\n  return p\n      .scale(239.75);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, acos, asin, atan2, cos, epsilon2, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function hillRaw(K) {\n  var L = 1 + K,\n      sinBt = sin(1 / L),\n      Bt = asin(sinBt),\n      A = 2 * sqrt(pi / (B = pi + 4 * Bt * L)),\n      B,\n      rho0 = 0.5 * A * (L + sqrt(K * (2 + K))),\n      K2 = K * K,\n      L2 = L * L;\n\n  function forward(lambda, phi) {\n    var t = 1 - sin(phi),\n        rho,\n        omega;\n    if (t && t < 2) {\n      var theta = halfPi - phi, i = 25, delta;\n      do {\n        var sinTheta = sin(theta),\n            cosTheta = cos(theta),\n            Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta),\n            C = 1 + L2 - 2 * L * cosTheta;\n        theta -= delta = (theta - K2 * Bt - L * sinTheta + C * Bt_Bt1 -0.5 * t * B) / (2 * L * sinTheta * Bt_Bt1);\n      } while (abs(delta) > epsilon2 && --i > 0);\n      rho = A * sqrt(C);\n      omega = lambda * Bt_Bt1 / pi;\n    } else {\n      rho = A * (K + t);\n      omega = lambda * Bt / pi;\n    }\n    return [\n      rho * sin(omega),\n      rho0 - rho * cos(omega)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + (y -= rho0) * y,\n        cosTheta = (1 + L2 - rho2 / (A * A)) / (2 * L),\n        theta = acos(cosTheta),\n        sinTheta = sin(theta),\n        Bt_Bt1 = Bt + atan2(sinTheta, L - cosTheta);\n    return [\n      asin(x / sqrt(rho2)) * pi / Bt_Bt1,\n      asin(1 - 2 * (theta - K2 * Bt - L * sinTheta + (1 + L2 - 2 * L * cosTheta) * Bt_Bt1) / B)\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var K = 1,\n      m = projectionMutator(hillRaw),\n      p = m(K);\n\n  p.ratio = function(_) {\n    return arguments.length ? m(K = +_) : K;\n  };\n\n  return p\n      .scale(167.774)\n      .center([0, 18.67]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {mollweideRaw} from \"./mollweide.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\n\nexport var sinuMollweidePhi = 0.7109889596207567;\n\nexport var sinuMollweideY = 0.0528035274542;\n\nexport function sinuMollweideRaw(lambda, phi) {\n  return phi > -sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] += sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nsinuMollweideRaw.invert = function(x, y) {\n  return y > -sinuMollweidePhi\n      ? mollweideRaw.invert(x, y - sinuMollweideY)\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(sinuMollweideRaw)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs} from \"./math.js\";\nimport {mollweideRaw} from \"./mollweide.js\";\nimport {sinusoidalRaw} from \"./sinusoidal.js\";\nimport {sinuMollweidePhi, sinuMollweideY} from \"./sinuMollweide.js\";\n\nexport function homolosineRaw(lambda, phi) {\n  return abs(phi) > sinuMollweidePhi\n      ? (lambda = mollweideRaw(lambda, phi), lambda[1] -= phi > 0 ? sinuMollweideY : -sinuMollweideY, lambda)\n      : sinusoidalRaw(lambda, phi);\n}\n\nhomolosineRaw.invert = function(x, y) {\n  return abs(y) > sinuMollweidePhi\n      ? mollweideRaw.invert(x, y + (y > 0 ? sinuMollweideY : -sinuMollweideY))\n      : sinusoidalRaw.invert(x, y);\n};\n\nexport default function() {\n  return projection(homolosineRaw)\n      .scale(152.63);\n}\n","import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { asin, cos, degrees, pi, radians, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\n\nexport function hufnagelRaw(a, b, psiMax, ratio) {\n  var k = sqrt(\n      (4 * pi) /\n        (2 * psiMax +\n          (1 + a - b / 2) * sin(2 * psiMax) +\n          ((a + b) / 2) * sin(4 * psiMax) +\n          (b / 2) * sin(6 * psiMax))\n    ),\n    c = sqrt(\n      ratio *\n        sin(psiMax) *\n        sqrt((1 + a * cos(2 * psiMax) + b * cos(4 * psiMax)) / (1 + a + b))\n    ),\n    M = psiMax * mapping(1);\n\n  function radius(psi) {\n    return sqrt(1 + a * cos(2 * psi) + b * cos(4 * psi));\n  }\n\n  function mapping(t) {\n    var psi = t * psiMax;\n    return (\n      (2 * psi +\n        (1 + a - b / 2) * sin(2 * psi) +\n        ((a + b) / 2) * sin(4 * psi) +\n        (b / 2) * sin(6 * psi)) /\n      psiMax\n    );\n  }\n\n  function inversemapping(psi) {\n    return radius(psi) * sin(psi);\n  }\n\n  var forward = function(lambda, phi) {\n    var psi = psiMax * solve(mapping, (M * sin(phi)) / psiMax, phi / pi);\n    if (isNaN(psi)) psi = psiMax * sign(phi);\n    var kr = k * radius(psi);\n    return [((kr * c * lambda) / pi) * cos(psi), (kr / c) * sin(psi)];\n  };\n\n  forward.invert = function(x, y) {\n    var psi = solve(inversemapping, (y * c) / k);\n    return [\n      (x * pi) / (cos(psi) * k * c * radius(psi)),\n      asin((psiMax * mapping(psi / psiMax)) / M)\n    ];\n  };\n\n  if (psiMax === 0) {\n    k = sqrt(ratio / pi);\n    forward = function(lambda, phi) {\n      return [lambda * k, sin(phi) / k];\n    };\n    forward.invert = function(x, y) {\n      return [x / k, asin(y * k)];\n    };\n  }\n\n  return forward;\n}\n\nexport default function() {\n  var a = 1,\n    b = 0,\n    psiMax = 45 * radians,\n    ratio = 2,\n    mutate = projectionMutator(hufnagelRaw),\n    projection = mutate(a, b, psiMax, ratio);\n\n  projection.a = function(_) {\n    return arguments.length ? mutate((a = +_), b, psiMax, ratio) : a;\n  };\n  projection.b = function(_) {\n    return arguments.length ? mutate(a, (b = +_), psiMax, ratio) : b;\n  };\n  projection.psiMax = function(_) {\n    return arguments.length\n      ? mutate(a, b, (psiMax = +_ * radians), ratio)\n      : psiMax * degrees;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(a, b, psiMax, (ratio = +_)) : ratio;\n  };\n\n  return projection.scale(180.739);\n}\n","// https://github.com/scijs/integrate-adaptive-simpson\n\n// This algorithm adapted from pseudocode in:\n// http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf\nfunction adsimp (f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n  if (state.nanEncountered) {\n    return NaN;\n  }\n\n  var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n\n  h = b - a;\n  f1 = f(a + h * 0.25);\n  f2 = f(b - h * 0.25);\n\n  // Simple check for NaN:\n  if (isNaN(f1)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  // Simple check for NaN:\n  if (isNaN(f2)) {\n    state.nanEncountered = true;\n    return;\n  }\n\n  sl = h * (fa + 4 * f1 + fm) / 12;\n  sr = h * (fm + 4 * f2 + fb) / 12;\n  s2 = sl + sr;\n  err = (s2 - V0) / 15;\n\n  if (depth > maxdepth) {\n    state.maxDepthCount++;\n    return s2 + err;\n  } else if (Math.abs(err) < tol) {\n    return s2 + err;\n  } else {\n    m = a + h * 0.5;\n\n    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V1)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n    if (isNaN(V2)) {\n      state.nanEncountered = true;\n      return NaN;\n    }\n\n    return V1 + V2;\n  }\n}\n\nexport function integrate (f, a, b, tol, maxdepth) {\n  var state = {\n    maxDepthCount: 0,\n    nanEncountered: false\n  };\n\n  if (tol === undefined) {\n    tol = 1e-8;\n  }\n  if (maxdepth === undefined) {\n    maxdepth = 20;\n  }\n\n  var fa = f(a);\n  var fm = f(0.5 * (a + b));\n  var fb = f(b);\n\n  var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n\n  var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n/*\n  if (state.maxDepthCount > 0 && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n  }\n\n  if (state.nanEncountered && console && console.warn) {\n    console.warn('integrate-adaptive-simpson: Warning: NaN encountered. Halting early.');\n  }\n*/\n\n  return result;\n}","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, pi, pow, sign, sin} from \"./math.js\";\nimport {integrate} from \"./integrate.js\";\n\nexport function hyperellipticalRaw(alpha, k, gamma) {\n\n  function elliptic (f) {\n    return alpha + (1 - alpha) * pow(1 - pow(f, k), 1 / k);\n  }\n\n  function z(f) {\n    return integrate(elliptic, 0, f, 1e-4);\n  }\n\n  var G = 1 / z(1),\n      n = 1000,\n      m = (1 + 1e-8) * G,\n      approx = [];\n  for (var i = 0; i <= n; i++)\n      approx.push(z(i / n) * m);\n\n  function Y(sinphi) {\n    var rmin = 0, rmax = n, r = n >> 1;\n    do {\n      if (approx[r] > sinphi) rmax = r; else rmin = r;\n      r = (rmin + rmax) >> 1;\n    } while (r > rmin);\n    var u = approx[r + 1] - approx[r];\n    if (u) u = (sinphi - approx[r + 1]) / u;\n    return (r + 1 + u) / n;\n  }\n\n  var ratio = 2 * Y(1) / pi * G / gamma;\n\n  var forward = function(lambda, phi) {\n    var y = Y(abs(sin(phi))),\n        x = elliptic(y) * lambda;\n    y /= ratio;\n    return [ x, (phi >= 0) ? y : -y ];\n  };\n\n  forward.invert = function(x, y) {\n    var phi;\n    y *= ratio;\n    if (abs(y) < 1) phi = sign(y) * asin(z(abs(y)) * G);\n    return [ x / elliptic(abs(y)), phi ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var alpha = 0,\n      k = 2.5,\n      gamma = 1.183136, // affine = sqrt(2 * gamma / pi) = 0.8679\n      m = projectionMutator(hyperellipticalRaw),\n      p = m(alpha, k, gamma);\n\n  p.alpha = function(_) {\n    return arguments.length ? m(alpha = +_, k, gamma) : alpha;\n  };\n\n  p.k = function(_) {\n    return arguments.length ? m(alpha, k = +_, gamma) : k;\n  };\n\n  p.gamma = function(_) {\n    return arguments.length ? m(alpha, k, gamma = +_) : gamma;\n  };\n\n  return p\n      .scale(152.63);\n}\n","import {merge} from \"d3-array\";\nimport {geoStream, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\n\nfunction pointEqual(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n\nfunction interpolateLine(coordinates, m) {\n  var i = -1,\n      n = coordinates.length,\n      p0 = coordinates[0],\n      p1,\n      dx,\n      dy,\n      resampled = [];\n  while (++i < n) {\n    p1 = coordinates[i];\n    dx = (p1[0] - p0[0]) / m;\n    dy = (p1[1] - p0[1]) / m;\n    for (var j = 0; j < m; ++j) resampled.push([p0[0] + j * dx, p0[1] + j * dy]);\n    p0 = p1;\n  }\n  resampled.push(p1);\n  return resampled;\n}\n\nfunction interpolateSphere(lobes) {\n  var coordinates = [],\n      lobe,\n      lambda0, phi0, phi1,\n      lambda2, phi2,\n      i, n = lobes[0].length;\n\n  // Northern Hemisphere\n  for (i = 0; i < n; ++i) {\n    lobe = lobes[0][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda0 + epsilon, phi0 + epsilon],\n      [lambda0 + epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi1 - epsilon],\n      [lambda2 - epsilon, phi2 + epsilon]\n    ], 30));\n  }\n\n  // Southern Hemisphere\n  for (i = lobes[1].length - 1; i >= 0; --i) {\n    lobe = lobes[1][i];\n    lambda0 = lobe[0][0], phi0 = lobe[0][1], phi1 = lobe[1][1];\n    lambda2 = lobe[2][0], phi2 = lobe[2][1];\n    coordinates.push(interpolateLine([\n      [lambda2 - epsilon, phi2 - epsilon],\n      [lambda2 - epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi1 + epsilon],\n      [lambda0 + epsilon, phi0 - epsilon]\n    ], 30));\n  }\n\n  return {\n    type: \"Polygon\",\n    coordinates: [merge(coordinates)]\n  };\n}\n\nexport default function(project, lobes, inverse) {\n  var sphere, bounds;\n\n  function forward(lambda, phi) {\n    var sign = phi < 0 ? -1 : +1, lobe = lobes[+(phi < 0)];\n    for (var i = 0, n = lobe.length - 1; i < n && lambda > lobe[i][2][0]; ++i);\n    var p = project(lambda - lobe[i][1][0], phi);\n    p[0] += project(lobe[i][1][0], sign * phi > sign * lobe[i][0][1] ? lobe[i][0][1] : phi)[0];\n    return p;\n  }\n\n  if (inverse) {\n    forward.invert = inverse(forward);\n  } else if (project.invert) {\n    forward.invert = function(x, y) {\n      var bound = bounds[+(y < 0)], lobe = lobes[+(y < 0)];\n      for (var i = 0, n = bound.length; i < n; ++i) {\n        var b = bound[i];\n        if (b[0][0] <= x && x < b[1][0] && b[0][1] <= y && y < b[1][1]) {\n          var p = project.invert(x - project(lobe[i][1][0], 0)[0], y);\n          p[0] += lobe[i][1][0];\n          return pointEqual(forward(p[0], p[1]), [x, y]) ? p : null;\n        }\n      }\n    };\n  }\n\n  var p = projection(forward),\n      stream_ = p.stream;\n\n  p.stream = function(stream) {\n    var rotate = p.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (p.rotate([0, 0]), stream_(stream));\n    p.rotate(rotate);\n    rotateStream.sphere = function() { geoStream(sphere, sphereStream); };\n    return rotateStream;\n  };\n  \n  p.lobes = function(_) {\n    if (!arguments.length) return lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * degrees, l[0][1] * degrees],\n          [l[1][0] * degrees, l[1][1] * degrees],\n          [l[2][0] * degrees, l[2][1] * degrees]\n        ];\n      });\n    });\n\n    sphere = interpolateSphere(_);\n\n    lobes = _.map(function(lobe) {\n      return lobe.map(function(l) {\n        return [\n          [l[0][0] * radians, l[0][1] * radians],\n          [l[1][0] * radians, l[1][1] * radians],\n          [l[2][0] * radians, l[2][1] * radians]\n        ];\n      });\n    });\n\n    bounds = lobes.map(function(lobe) {\n      return lobe.map(function(l) {\n        var x0 = project(l[0][0], l[0][1])[0],\n            x1 = project(l[2][0], l[2][1])[0],\n            y0 = project(l[1][0], l[0][1])[1],\n            y1 = project(l[1][0], l[1][1])[1],\n            t;\n        if (y0 > y1) t = y0, y0 = y1, y1 = t;\n        return [[x0, y0], [x1, y1]];\n      });\n    });\n\n    return p;\n  };\n\n  if (lobes != null) p.lobes(lobes);\n\n  return p;\n}\n","import {boggsRaw} from \"../boggs.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(boggsRaw, lobes)\n      .scale(160.857);\n}\n","import {homolosineRaw} from \"../homolosine.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(homolosineRaw, lobes)\n      .scale(152.63);\n}\n","import {mollweideRaw} from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-100,  90], [ -40,   0]],\n  [[ -40,   0], [  30,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-160, -90], [-100,   0]],\n  [[-100,   0], [ -60, -90], [ -20,   0]],\n  [[ -20,   0], [  20, -90], [  80,   0]],\n  [[  80,   0], [ 140, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529);\n}\n","import {mollweideRaw} from \"../mollweide.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [ -90,  90], [   0,   0]],\n  [[   0,   0], [  90,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [ -90, -90], [   0,   0]],\n  [[   0,   0], [  90, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(mollweideRaw, lobes)\n      .scale(169.529)\n      .rotate([20, 0]);\n}\n","import {sinuMollweideRaw} from \"../sinuMollweide.js\";\nimport interrupt from \"./index.js\";\nimport {solve2d} from \"../newton.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  35], [ -30,  90], [   0,  35]],\n  [[   0,  35], [  30,  90], [ 180,  35]]\n], [ // southern hemisphere\n  [[-180, -10], [-102, -90], [ -65, -10]],\n  [[ -65, -10], [   5, -90], [  77, -10]],\n  [[  77, -10], [ 103, -90], [ 180, -10]]\n]];\n\nexport default function() {\n  return interrupt(sinuMollweideRaw, lobes, solve2d)\n      .rotate([-20, -55])\n      .scale(164.263)\n      .center([0, -5.4036]);\n}\n","import {sinusoidalRaw} from \"../sinusoidal.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,   0], [-110,  90], [ -40,   0]],\n  [[ -40,   0], [   0,  90], [  40,   0]],\n  [[  40,   0], [ 110,  90], [ 180,   0]]\n], [ // southern hemisphere\n  [[-180,   0], [-110, -90], [ -40,   0]],\n  [[ -40,   0], [   0, -90], [  40,   0]],\n  [[  40,   0], [ 110, -90], [ 180,   0]]\n]];\n\nexport default function() {\n  return interrupt(sinusoidalRaw, lobes)\n      .scale(152.63)\n      .rotate([-20, 0]);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt, tau} from \"./math.js\";\n\nexport function kavrayskiy7Raw(lambda, phi) {\n  return [3 / tau * lambda * sqrt(pi * pi / 3 - phi * phi), phi];\n}\n\nkavrayskiy7Raw.invert = function(x, y) {\n  return [tau / 3 * x / sqrt(pi * pi / 3 - y * y), y];\n};\n\nexport default function() {\n  return projection(kavrayskiy7Raw)\n      .scale(158.837);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {abs, asin, atan2, cos, epsilon, halfPi, pow, sign, sin} from \"./math.js\";\n\nexport function lagrangeRaw(n) {\n\n  function forward(lambda, phi) {\n    if (abs(abs(phi) - halfPi) < epsilon) return [0, phi < 0 ? -2 : 2];\n    var sinPhi = sin(phi),\n        v = pow((1 + sinPhi) / (1 - sinPhi), n / 2),\n        c = 0.5 * (v + 1 / v) + cos(lambda *= n);\n    return [\n      2 * sin(lambda) / c,\n      (v - 1 / v) / c\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y0 = abs(y);\n    if (abs(y0 - 2) < epsilon) return x ? null : [0, sign(y) * halfPi];\n    if (y0 > 2) return null;\n\n    x /= 2, y /= 2;\n    var x2 = x * x,\n        y2 = y * y,\n        t = 2 * y / (1 + x2 + y2); // tanh(nPhi)\n    t = pow((1 + t) / (1 - t), 1 / n);\n    return [\n      atan2(2 * x, 1 - x2 - y2) / n,\n      asin((t - 1) / (t + 1))\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var n = 0.5,\n      m = projectionMutator(lagrangeRaw),\n      p = m(n);\n\n  p.spacing = function(_) {\n    return arguments.length ? m(n = +_) : n;\n  };\n\n  return p\n      .scale(124.75);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, cos, epsilon, halfPi, sin, pi, sqrt, sqrt2} from \"./math.js\";\n\nvar pi_sqrt2 = pi / sqrt2;\n\nexport function larriveeRaw(lambda, phi) {\n  return [\n    lambda * (1 + sqrt(cos(phi))) / 2,\n    phi / (cos(phi / 2) * cos(lambda / 6))\n  ];\n}\n\nlarriveeRaw.invert = function(x, y) {\n  var x0 = abs(x),\n      y0 = abs(y),\n      lambda = epsilon,\n      phi = halfPi;\n  if (y0 < pi_sqrt2) phi *= y0 / pi_sqrt2;\n  else lambda += 6 * acos(pi_sqrt2 / y0);\n  for (var i = 0; i < 25; i++) {\n    var sinPhi = sin(phi),\n        sqrtcosPhi = sqrt(cos(phi)),\n        sinPhi_2 = sin(phi / 2),\n        cosPhi_2 = cos(phi / 2),\n        sinLambda_6 = sin(lambda / 6),\n        cosLambda_6 = cos(lambda / 6),\n        f0 = 0.5 * lambda * (1 + sqrtcosPhi) - x0,\n        f1 = phi / (cosPhi_2 * cosLambda_6) - y0,\n        df0dPhi = sqrtcosPhi ? -0.25 * lambda * sinPhi / sqrtcosPhi : 0,\n        df0dLambda = 0.5 * (1 + sqrtcosPhi),\n        df1dPhi = (1 + 0.5 * phi * sinPhi_2 / cosPhi_2) / (cosPhi_2 * cosLambda_6),\n        df1dLambda = (phi / cosPhi_2) * (sinLambda_6 / 6) / (cosLambda_6 * cosLambda_6),\n        denom = df0dPhi * df1dLambda - df1dPhi * df0dLambda,\n        dPhi = (f0 * df1dLambda - f1 * df0dLambda) / denom,\n        dLambda = (f1 * df0dPhi - f0 * df1dPhi) / denom;\n    phi -= dPhi;\n    lambda -= dLambda;\n    if (abs(dPhi) < epsilon && abs(dLambda) < epsilon) break;\n  }\n  return [x < 0 ? -lambda : lambda, y < 0 ? -phi : phi];\n};\n\nexport default function() {\n  return projection(larriveeRaw)\n      .scale(97.2672);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, pi, sign} from \"./math.js\";\n\nexport function laskowskiRaw(lambda, phi) {\n  var lambda2 = lambda * lambda, phi2 = phi * phi;\n  return [\n    lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)),\n    phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032))\n  ];\n}\n\nlaskowskiRaw.invert = function(x, y) {\n  var lambda = sign(x) * pi,\n      phi = y / 2,\n      i = 50;\n  do {\n    var lambda2 = lambda * lambda,\n        phi2 = phi * phi,\n        lambdaPhi = lambda * phi,\n        fx = lambda * (0.975534 + phi2 * (-0.119161 + lambda2 * -0.0143059 + phi2 * -0.0547009)) - x,\n        fy = phi * (1.00384 + lambda2 * (0.0802894 + phi2 * -0.02855 + lambda2 * 0.000199025) + phi2 * (0.0998909 + phi2 * -0.0491032)) - y,\n        deltaxDeltaLambda = 0.975534 - phi2 * (0.119161 + 3 * lambda2 * 0.0143059 + phi2 * 0.0547009),\n        deltaxDeltaPhi = -lambdaPhi * (2 * 0.119161 + 4 * 0.0547009 * phi2 + 2 * 0.0143059 * lambda2),\n        deltayDeltaLambda = lambdaPhi * (2 * 0.0802894 + 4 * 0.000199025 * lambda2 + 2 * -0.02855 * phi2),\n        deltayDeltaPhi = 1.00384 + lambda2 * (0.0802894 + 0.000199025 * lambda2) + phi2 * (3 * (0.0998909 - 0.02855 * lambda2) - 5 * 0.0491032 * phi2),\n        denominator = deltaxDeltaPhi * deltayDeltaLambda - deltayDeltaPhi * deltaxDeltaLambda,\n        deltaLambda = (fy * deltaxDeltaPhi - fx * deltayDeltaPhi) / denominator,\n        deltaPhi = (fx * deltayDeltaLambda - fy * deltaxDeltaLambda) / denominator;\n    lambda -= deltaLambda, phi -= deltaPhi;\n  } while ((abs(deltaLambda) > epsilon || abs(deltaPhi) > epsilon) && --i > 0);\n  return i && [lambda, phi];\n};\n\nexport default function() {\n  return projection(laskowskiRaw)\n      .scale(139.98);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {acos, asin, cos, sign, sin, tan, sqrt, sqrt1_2} from \"./math.js\";\n\nexport function littrowRaw(lambda, phi) {\n  return [\n    sin(lambda) / cos(phi),\n    tan(phi) * cos(lambda)\n  ];\n}\n\nlittrowRaw.invert = function(x, y) {\n  var x2 = x * x,\n      y2 = y * y,\n      y2_1 = y2 + 1,\n      x2_y2_1 = x2 + y2_1,\n      cosPhi = x\n          ? sqrt1_2 * sqrt((x2_y2_1 - sqrt(x2_y2_1 * x2_y2_1 - 4 * x2)) / x2)\n          : 1 / sqrt(y2_1);\n  return [\n    asin(x * cosPhi),\n    sign(y) * acos(cosPhi)\n  ];\n};\n\nexport default function() {\n  return projection(littrowRaw)\n      .scale(144.049)\n      .clipAngle(90 - 1e-3);\n}\n","import parallel1 from \"./parallel1.js\";\nimport {abs, cos, epsilon, halfPi, log, quarterPi, tan} from \"./math.js\";\n\nexport function loximuthalRaw(phi0) {\n  var cosPhi0 = cos(phi0),\n      tanPhi0 = tan(quarterPi + phi0 / 2);\n\n  function forward(lambda, phi) {\n    var y = phi - phi0,\n        x = abs(y) < epsilon ? lambda * cosPhi0\n            : abs(x = quarterPi + phi / 2) < epsilon || abs(abs(x) - halfPi) < epsilon\n            ? 0 : lambda * y / log(tan(x) / tanPhi0);\n    return [x, y];\n  }\n\n  forward.invert = function(x, y) {\n    var lambda,\n        phi = y + phi0;\n    return [\n      abs(y) < epsilon ? x / cosPhi0\n          : (abs(lambda = quarterPi + phi / 2) < epsilon || abs(abs(lambda) - halfPi) < epsilon) ? 0\n          : x * log(tan(lambda) / tanPhi0) / y,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(loximuthalRaw)\n      .parallel(40)\n      .scale(158.837);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, exp, log, quarterPi, pi, tan} from \"./math.js\";\n\nexport function millerRaw(lambda, phi) {\n  return [lambda, 1.25 * log(tan(quarterPi + 0.4 * phi))];\n}\n\nmillerRaw.invert = function(x, y) {\n  return [x, 2.5 * atan(exp(0.8 * y)) - 0.625 * pi];\n};\n\nexport default function() {\n  return projection(millerRaw)\n      .scale(108.318);\n}\n","import {geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, epsilon, sin, sqrt} from \"./math.js\";\n\nexport function modifiedStereographicRaw(C) {\n  var m = C.length - 1;\n\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = 2 / (1 + cosPhi * cos(lambda)),\n        zr = k * cosPhi * sin(lambda),\n        zi = k * sin(phi),\n        i = m,\n        w = C[i],\n        ar = w[0],\n        ai = w[1],\n        t;\n    while (--i >= 0) {\n      w = C[i];\n      ar = w[0] + zr * (t = ar) - zi * ai;\n      ai = w[1] + zr * ai + zi * t;\n    }\n    ar = zr * (t = ar) - zi * ai;\n    ai = zr * ai + zi * t;\n    return [ar, ai];\n  }\n\n  forward.invert = function(x, y) {\n    var i = 20,\n        zr = x,\n        zi = y;\n    do {\n      var j = m,\n          w = C[j],\n          ar = w[0],\n          ai = w[1],\n          br = 0,\n          bi = 0,\n          t;\n\n      while (--j >= 0) {\n        w = C[j];\n        br = ar + zr * (t = br) - zi * bi;\n        bi = ai + zr * bi + zi * t;\n        ar = w[0] + zr * (t = ar) - zi * ai;\n        ai = w[1] + zr * ai + zi * t;\n      }\n      br = ar + zr * (t = br) - zi * bi;\n      bi = ai + zr * bi + zi * t;\n      ar = zr * (t = ar) - zi * ai - x;\n      ai = zr * ai + zi * t - y;\n\n      var denominator = br * br + bi * bi, deltar, deltai;\n      zr -= deltar = (ar * br + ai * bi) / denominator;\n      zi -= deltai = (ai * br - ar * bi) / denominator;\n    } while (abs(deltar) + abs(deltai) > epsilon * epsilon && --i > 0);\n\n    if (i) {\n      var rho = sqrt(zr * zr + zi * zi),\n          c = 2 * atan(rho * 0.5),\n          sinc = sin(c);\n      return [atan2(zr * sinc, rho * cos(c)), rho ? asin(zi * sinc / rho) : 0];\n    }\n  };\n\n  return forward;\n}\n\nvar alaska = [[0.9972523, 0], [0.0052513, -0.0041175], [0.0074606, 0.0048125], [-0.0153783, -0.1968253], [0.0636871, -0.1408027], [0.3660976, -0.2937382]],\n    gs48 = [[0.98879, 0], [0, 0], [-0.050909, 0], [0, 0], [0.075528, 0]],\n    gs50 = [[0.9842990, 0], [0.0211642, 0.0037608], [-0.1036018, -0.0575102], [-0.0329095, -0.0320119], [0.0499471, 0.1223335], [0.0260460, 0.0899805], [0.0007388, -0.1435792], [0.0075848, -0.1334108], [-0.0216473, 0.0776645], [-0.0225161, 0.0853673]],\n    miller = [[0.9245, 0], [0, 0], [0.01943, 0]],\n    lee = [[0.721316, 0], [0, 0], [-0.00881625, -0.00617325]];\n\nexport function modifiedStereographicAlaska() {\n  return modifiedStereographic(alaska, [152, -64])\n      .scale(1400)\n      .center([-160.908, 62.4864])\n      .clipAngle(30)\n      .angle(7.8);\n}\n\nexport function modifiedStereographicGs48() {\n  return modifiedStereographic(gs48, [95, -38])\n      .scale(1000)\n      .clipAngle(55)\n      .center([-96.5563, 38.8675]);\n}\n\nexport function modifiedStereographicGs50() {\n  return modifiedStereographic(gs50, [120, -45])\n      .scale(359.513)\n      .clipAngle(55)\n      .center([-117.474, 53.0628]);\n}\n\nexport function modifiedStereographicMiller() {\n  return modifiedStereographic(miller, [-20, -18])\n      .scale(209.091)\n      .center([20, 16.7214])\n      .clipAngle(82);\n}\n\nexport function modifiedStereographicLee() {\n  return modifiedStereographic(lee, [165, 10])\n      .scale(250)\n      .clipAngle(130)\n      .center([-165, -10]);\n}\n\nexport default function modifiedStereographic(coefficients, rotate) {\n  var p = projection(modifiedStereographicRaw(coefficients)).rotate(rotate).clipAngle(90),\n      r = rotation(rotate),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p;\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, cos, sin, sqrt} from \"./math.js\";\n\nvar sqrt6 = sqrt(6),\n    sqrt7 = sqrt(7);\n\nexport function mtFlatPolarParabolicRaw(lambda, phi) {\n  var theta = asin(7 * sin(phi) / (3 * sqrt6));\n  return [\n    sqrt6 * lambda * (2 * cos(2 * theta / 3) - 1) / sqrt7,\n    9 * sin(theta / 3) / sqrt7\n  ];\n}\n\nmtFlatPolarParabolicRaw.invert = function(x, y) {\n  var theta = 3 * asin(y * sqrt7 / 9);\n  return [\n    x * sqrt7 / (sqrt6 * (2 * cos(2 * theta / 3) - 1)),\n    asin(sin(theta) * 3 * sqrt6 / 7)\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarParabolicRaw)\n      .scale(164.859);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, sin, sqrt, sqrt1_2, sqrt2} from \"./math.js\";\n\nexport function mtFlatPolarQuarticRaw(lambda, phi) {\n  var k = (1 + sqrt1_2) * sin(phi),\n      theta = phi;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (sin(theta / 2) + sin(theta) - k) / (0.5 * cos(theta / 2) + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    lambda * (1 + 2 * cos(theta) / cos(theta / 2)) / (3 * sqrt2),\n    2 * sqrt(3) * sin(theta / 2) / sqrt(2 + sqrt2)\n  ];\n}\n\nmtFlatPolarQuarticRaw.invert = function(x, y) {\n  var sinTheta_2 = y * sqrt(2 + sqrt2) / (2 * sqrt(3)),\n      theta = 2 * asin(sinTheta_2);\n  return [\n    3 * sqrt2 * x / (1 + 2 * cos(theta) / cos(theta / 2)),\n    asin((sinTheta_2 + sin(theta)) / (1 + sqrt1_2))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarQuarticRaw)\n      .scale(188.209);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, cos, epsilon, halfPi, pi, sin, sqrt} from \"./math.js\";\n\nexport function mtFlatPolarSinusoidalRaw(lambda, phi) {\n  var A = sqrt(6 / (4 + pi)),\n      k = (1 + pi / 4) * sin(phi),\n      theta = phi / 2;\n  for (var i = 0, delta; i < 25; i++) {\n    theta -= delta = (theta / 2 + sin(theta) - k) / (0.5 + cos(theta));\n    if (abs(delta) < epsilon) break;\n  }\n  return [\n    A * (0.5 + cos(theta)) * lambda / 1.5,\n    A * theta\n  ];\n}\n\nmtFlatPolarSinusoidalRaw.invert = function(x, y) {\n  var A = sqrt(6 / (4 + pi)),\n      theta = y / A;\n  if (abs(abs(theta) - halfPi) < epsilon) theta = theta < 0 ? -halfPi : halfPi;\n  return [\n    1.5 * x / (A * (0.5 + cos(theta))),\n    asin((theta / 2 + sin(theta)) / (1 + pi / 4))\n  ];\n};\n\nexport default function() {\n  return projection(mtFlatPolarSinusoidalRaw)\n      .scale(166.518);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon2} from \"./math.js\";\n\nexport function naturalEarth2Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2, phi6 = phi2 * phi4;\n  return [\n    lambda * (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))\n  ];\n}\n\nnaturalEarth2Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta, phi2, phi4, phi6;\n  do {\n    phi2 = phi * phi; phi4 = phi2 * phi2;\n    phi -= delta = ((phi * (1.01183 + phi4 * phi4 * (-0.02625 + 0.01926 * phi2 - 0.00396 * phi4))) - y) /\n      (1.01183 + phi4 * phi4 * ((9 * -0.02625) + (11 * 0.01926) * phi2 + (13 * -0.00396) * phi4));\n  } while (abs(delta) > epsilon2 && --i > 0);\n  phi2 = phi * phi; phi4 = phi2 * phi2; phi6 = phi2 * phi4;\n  return [\n    x / (0.84719 - 0.13063 * phi2 + phi6 * phi6 * (-0.04515 + 0.05494 * phi2 - 0.02326 * phi4 + 0.00331 * phi6)),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth2Raw)\n      .scale(175.295);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, epsilon, tan} from \"./math.js\";\n\nexport function nellHammerRaw(lambda, phi) {\n  return [\n    lambda * (1 + cos(phi)) / 2,\n    2 * (phi - tan(phi / 2))\n  ];\n}\n\nnellHammerRaw.invert = function(x, y) {\n  var p = y / 2;\n  for (var i = 0, delta = Infinity; i < 10 && abs(delta) > epsilon; ++i) {\n    var c = cos(y / 2);\n    y -= delta = (y - tan(y / 2) - p) / (1 - 0.5 / (c * c));\n  }\n  return [\n    2 * x / (1 + cos(y)),\n    y\n  ];\n};\n\nexport default function() {\n  return projection(nellHammerRaw)\n      .scale(152.63);\n}\n","import {hammerRaw} from \"../hammer.js\";\nimport interrupt from \"./index.js\";\n\nvar lobes = [[ // northern hemisphere\n  [[-180,  0],  [-90,  90], [   0,  0]],\n  [[   0,  0], [  90,  90], [ 180, 0]]\n], [ // southern hemisphere\n  [[-180, 0], [-90, -90], [  0, 0]],\n  [[   0, 0], [ 90, -90], [180, 0]]\n]];\n\nexport default function() {\n  return interrupt(hammerRaw(Infinity), lobes)\n      .rotate([20, 0])\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, cos, halfPi, pi, sign, sin, sqrt} from \"./math.js\";\nimport {solve} from \"./newton.js\";\n\n// Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n    q = cos(phi),\n    s = sign(lambda);\n\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];\n  else if (phi === 0) return [lambda, 0];\n  else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n\n  var b = pi / (2 * lambda) - (2 * lambda) / pi,\n    c = (2 * phi) / pi,\n    d = (1 - c * c) / (sinPhi - c);\n\n  var b2 = b * b,\n    d2 = d * d,\n    b2d2 = 1 + b2 / d2,\n    d2b2 = 1 + d2 / b2;\n\n  var M = ((b * sinPhi) / d - b / 2) / b2d2,\n    N = ((d2 * sinPhi) / b2 + d / 2) / d2b2,\n    m = M * M + (q * q) / b2d2,\n    n = N * N - ((d2 * sinPhi * sinPhi) / b2 + d * sinPhi - 1) / d2b2;\n\n  return [\n    halfPi * (M + sqrt(m) * s),\n    halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)\n  ];\n}\n\nnicolosiRaw.invert = function(x, y) {\n\n  x /= halfPi;\n  y /= halfPi;\n\n  var x2 = x * x,\n    y2 = y * y,\n    x2y2 = x2 + y2,\n    pi2 = pi * pi;\n\n  return [\n    x ? (x2y2 -1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0,\n    solve(function(phi) {\n      return (\n        x2y2 * (pi * sin(phi) - 2 * phi) * pi +\n        4 * phi * phi * (y - sin(phi)) +\n        2 * pi * phi -\n        pi2 * y\n      );\n    }, 0)\n  ];\n};\n\nexport default function() {\n  return projection(nicolosiRaw)\n    .scale(127.267);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon} from \"./math.js\";\n\n// Based on Java implementation by Bojan Savric.\n// https://github.com/OSUCartography/JMapProjLib/blob/master/src/com/jhlabs/map/proj/PattersonProjection.java\n\nvar pattersonK1 = 1.0148,\n    pattersonK2 = 0.23185,\n    pattersonK3 = -0.14499,\n    pattersonK4 = 0.02406,\n    pattersonC1 = pattersonK1,\n    pattersonC2 = 5 * pattersonK2,\n    pattersonC3 = 7 * pattersonK3,\n    pattersonC4 = 9 * pattersonK4,\n    pattersonYmax = 1.790857183;\n\nexport function pattersonRaw(lambda, phi) {\n  var phi2 = phi * phi;\n  return [\n    lambda,\n    phi * (pattersonK1 + phi2 * phi2 * (pattersonK2 + phi2 * (pattersonK3 + pattersonK4 * phi2)))\n  ];\n}\n\npattersonRaw.invert = function(x, y) {\n  if (y > pattersonYmax) y = pattersonYmax;\n  else if (y < -pattersonYmax) y = -pattersonYmax;\n  var yc = y, delta;\n\n  do { // Newton-Raphson\n    var y2 = yc * yc;\n    yc -= delta = ((yc * (pattersonK1 + y2 * y2 * (pattersonK2 + y2 * (pattersonK3 + pattersonK4 * y2)))) - y) / (pattersonC1 + y2 * y2 * (pattersonC2 + y2 * (pattersonC3 + pattersonC4 * y2)));\n  } while (abs(delta) > epsilon);\n\n  return [x, yc];\n};\n\nexport default function() {\n  return projection(pattersonRaw)\n      .scale(139.319);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, cos, epsilon, halfPi, sign, sin, tan} from \"./math.js\";\n\nexport function polyconicRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var tanPhi = tan(phi),\n      k = lambda * sin(phi);\n  return [\n    sin(k) / tanPhi,\n    phi + (1 - cos(k)) / tanPhi\n  ];\n}\n\npolyconicRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  var k = x * x + y * y,\n      phi = y * 0.5,\n      i = 10, delta;\n  do {\n    var tanPhi = tan(phi),\n        secPhi = 1 / cos(phi),\n        j = k - 2 * y * phi + phi * phi;\n    phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n  } while (abs(delta) > epsilon && --i > 0);\n  tanPhi = tan(phi);\n  return [\n    (abs(y) < abs(phi + 1 / tanPhi) ? asin(x * tanPhi) : sign(y) * sign(x) * (acos(abs(x * tanPhi)) + halfPi)) / sin(phi),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(polyconicRaw)\n      .scale(103.74);\n}\n","import {atan2, cos, sin, sqrt} from \"../math.js\";\n\n// Note: 6-element arrays are used to denote the 3x3 affine transform matrix:\n// [a, b, c,\n//  d, e, f,\n//  0, 0, 1] - this redundant row is left out.\n\n// Transform matrix for [a0, a1] -> [b0, b1].\nexport default function(a, b) {\n  var u = subtract(a[1], a[0]),\n      v = subtract(b[1], b[0]),\n      phi = angle(u, v),\n      s = length(u) / length(v);\n\n  return multiply([\n    1, 0, a[0][0],\n    0, 1, a[0][1]\n  ], multiply([\n    s, 0, 0,\n    0, s, 0\n  ], multiply([\n    cos(phi), sin(phi), 0,\n    -sin(phi), cos(phi), 0\n  ], [\n    1, 0, -b[0][0],\n    0, 1, -b[0][1]\n  ])));\n}\n\n// Inverts a transform matrix.\nexport function inverse(m) {\n  var k = 1 / (m[0] * m[4] - m[1] * m[3]);\n  return [\n    k * m[4], -k * m[1], k * (m[1] * m[5] - m[2] * m[4]),\n    -k * m[3], k * m[0], k * (m[2] * m[3] - m[0] * m[5])\n  ];\n}\n\n// Multiplies two 3x2 matrices.\nexport function multiply(a, b) {\n  return [\n    a[0] * b[0] + a[1] * b[3],\n    a[0] * b[1] + a[1] * b[4],\n    a[0] * b[2] + a[1] * b[5] + a[2],\n    a[3] * b[0] + a[4] * b[3],\n    a[3] * b[1] + a[4] * b[4],\n    a[3] * b[2] + a[4] * b[5] + a[5]\n  ];\n}\n\n// Subtracts 2D vectors.\nfunction subtract(a, b) {\n  return [a[0] - b[0], a[1] - b[1]];\n}\n\n// Magnitude of a 2D vector.\nfunction length(v) {\n  return sqrt(v[0] * v[0] + v[1] * v[1]);\n}\n\n// Angle between two 2D vectors.\nfunction angle(a, b) {\n  return atan2(a[0] * b[1] - a[1] * b[0], a[0] * b[0] + a[1] * b[1]);\n}\n","import {geoBounds as bounds, geoCentroid as centroid, geoInterpolate as interpolate, geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon, radians} from \"../math.js\";\nimport {default as matrix, multiply, inverse} from \"./matrix.js\";\n\n// Creates a polyhedral projection.\n//  * root: a spanning tree of polygon faces.  Nodes are automatically\n//    augmented with a transform matrix.\n//  * face: a function that returns the appropriate node for a given {lambda, phi}\n//    point (radians).\nexport default function(root, face) {\n\n  recurse(root, {transform: null});\n\n  function recurse(node, parent) {\n    node.edges = faceEdges(node.face);\n    // Find shared edge.\n    if (parent.face) {\n      var shared = node.shared = sharedEdge(node.face, parent.face),\n          m = matrix(shared.map(parent.project), shared.map(node.project));\n      node.transform = parent.transform ? multiply(parent.transform, m) : m;\n      // Replace shared edge in parent edges array.\n      var edges = parent.edges;\n      for (var i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = node;\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = node;\n      }\n      edges = node.edges;\n      for (i = 0, n = edges.length; i < n; ++i) {\n        if (pointEqual(shared[0], edges[i][0]) && pointEqual(shared[1], edges[i][1])) edges[i] = parent;\n        if (pointEqual(shared[0], edges[i][1]) && pointEqual(shared[1], edges[i][0])) edges[i] = parent;\n      }\n    } else {\n      node.transform = parent.transform;\n    }\n    if (node.children) {\n      node.children.forEach(function(child) {\n        recurse(child, node);\n      });\n    }\n    return node;\n  }\n\n  function forward(lambda, phi) {\n    var node = face(lambda, phi),\n        point = node.project([lambda * degrees, phi * degrees]),\n        t;\n    if (t = node.transform) {\n      return [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        -(t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    point[1] = -point[1];\n    return point;\n  }\n\n  // Naive inverse!  A faster solution would use bounding boxes, or even a\n  // polygonal quadtree.\n  if (hasInverse(root)) forward.invert = function(x, y) {\n    var coordinates = faceInvert(root, [x, -y]);\n    return coordinates && (coordinates[0] *= radians, coordinates[1] *= radians, coordinates);\n  };\n\n  function faceInvert(node, coordinates) {\n    var invert = node.project.invert,\n        t = node.transform,\n        point = coordinates;\n    if (t) {\n      t = inverse(t);\n      point = [\n        t[0] * point[0] + t[1] * point[1] + t[2],\n        (t[3] * point[0] + t[4] * point[1] + t[5])\n      ];\n    }\n    if (invert && node === faceDegrees(p = invert(point))) return p;\n    var p,\n        children = node.children;\n    for (var i = 0, n = children && children.length; i < n; ++i) {\n      if (p = faceInvert(children[i], coordinates)) return p;\n    }\n  }\n\n  function faceDegrees(coordinates) {\n    return face(coordinates[0] * radians, coordinates[1] * radians);\n  }\n\n  var proj = projection(forward),\n      stream_ = proj.stream;\n\n  proj.stream = function(stream) {\n    var rotate = proj.rotate(),\n        rotateStream = stream_(stream),\n        sphereStream = (proj.rotate([0, 0]), stream_(stream));\n    proj.rotate(rotate);\n    rotateStream.sphere = function() {\n      sphereStream.polygonStart();\n      sphereStream.lineStart();\n      outline(sphereStream, root);\n      sphereStream.lineEnd();\n      sphereStream.polygonEnd();\n    };\n    return rotateStream;\n  };\n\n  return proj.angle(-30);\n}\n\nfunction outline(stream, node, parent) {\n  var point,\n      edges = node.edges,\n      n = edges.length,\n      edge,\n      multiPoint = {type: \"MultiPoint\", coordinates: node.face},\n      notPoles = node.face.filter(function(d) { return abs(d[1]) !== 90; }),\n      b = bounds({type: \"MultiPoint\", coordinates: notPoles}),\n      inside = false,\n      j = -1,\n      dx = b[1][0] - b[0][0];\n  // TODO\n  var c = dx === 180 || dx === 360\n      ? [(b[0][0] + b[1][0]) / 2, (b[0][1] + b[1][1]) / 2]\n      : centroid(multiPoint);\n  // First find the shared edge…\n  if (parent) while (++j < n) {\n    if (edges[j] === parent) break;\n  }\n  ++j;\n  for (var i = 0; i < n; ++i) {\n    edge = edges[(i + j) % n];\n    if (Array.isArray(edge)) {\n      if (!inside) {\n        stream.point((point = interpolate(edge[0], c)(epsilon))[0], point[1]);\n        inside = true;\n      }\n      stream.point((point = interpolate(edge[1], c)(epsilon))[0], point[1]);\n    } else {\n      inside = false;\n      if (edge !== parent) outline(stream, edge, node);\n    }\n  }\n}\n\n// Tests equality of two spherical points.\nfunction pointEqual(a, b) {\n  return a && b && a[0] === b[0] && a[1] === b[1];\n}\n\n// Finds a shared edge given two clockwise polygons.\nfunction sharedEdge(a, b) {\n  var x, y, n = a.length, found = null;\n  for (var i = 0; i < n; ++i) {\n    x = a[i];\n    for (var j = b.length; --j >= 0;) {\n      y = b[j];\n      if (x[0] === y[0] && x[1] === y[1]) {\n        if (found) return [found, x];\n        found = x;\n      }\n    }\n  }\n}\n\n// Converts an array of n face vertices to an array of n + 1 edges.\nfunction faceEdges(face) {\n  var n = face.length,\n      edges = [];\n  for (var a = face[n - 1], i = 0; i < n; ++i) edges.push([a, a = face[i]]);\n  return edges;\n}\n\nfunction hasInverse(node) {\n  return node.project.invert || node.children && node.children.some(hasInverse);\n}\n","// TODO generate on-the-fly to avoid external modification.\nvar octahedron = [\n  [0, 90],\n  [-90, 0], [0, 0], [90, 0], [180, 0],\n  [0, -90]\n];\n\nexport default [\n  [0, 2, 1],\n  [0, 3, 2],\n  [5, 1, 2],\n  [5, 2, 3],\n  [0, 1, 4],\n  [0, 4, 3],\n  [5, 4, 1],\n  [5, 3, 4]\n].map(function(face) {\n  return face.map(function(i) {\n    return octahedron[i];\n  });\n});\n","import {geoCentroid as centroid, geoProjection as projection} from \"d3-geo\";\nimport {collignonRaw} from \"../collignon.js\";\nimport {pi, sqrt} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nvar kx = 2 / sqrt(3);\n\nfunction collignonK(a, b) {\n  var p = collignonRaw(a, b);\n  return [p[0] * kx, p[1]];\n}\n\ncollignonK.invert = function(x,y) {\n  return collignonRaw.invert(x / kx, y);\n};\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return projection(collignonK).translate([0, 0]).scale(1).rotate(c[1] > 0 ? [-c[0], 0] : [180 - c[0], 180]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(121.906)\n      .center([0, 48.5904]);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {asin, atan2, cos, degrees, max, min, pi, radians, sin} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = face.length === 6 ? centroid({type: \"MultiPoint\", coordinates: face}) : face[0];\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var w5 = octahedron.map(function(face) {\n    var xyz = face.map(cartesian),\n        n = xyz.length,\n        a = xyz[n - 1],\n        b,\n        hexagon = [];\n    for (var i = 0; i < n; ++i) {\n      b = xyz[i];\n      hexagon.push(spherical([\n        a[0] * 0.9486832980505138 + b[0] * 0.31622776601683794,\n        a[1] * 0.9486832980505138 + b[1] * 0.31622776601683794,\n        a[2] * 0.9486832980505138 + b[2] * 0.31622776601683794\n      ]), spherical([\n        b[0] * 0.9486832980505138 + a[0] * 0.31622776601683794,\n        b[1] * 0.9486832980505138 + a[1] * 0.31622776601683794,\n        b[2] * 0.9486832980505138 + a[2] * 0.31622776601683794\n      ]));\n      a = b;\n    }\n    return hexagon;\n  });\n\n  var cornerNormals = [];\n\n  var parents = [-1, 0, 0, 1, 0, 1, 4, 5];\n\n  w5.forEach(function(hexagon, j) {\n    var face = octahedron[j],\n        n = face.length,\n        normals = cornerNormals[j] = [];\n    for (var i = 0; i < n; ++i) {\n      w5.push([\n        face[i],\n        hexagon[(i * 2 + 2) % (2 * n)],\n        hexagon[(i * 2 + 1) % (2 * n)]\n      ]);\n      parents.push(j);\n      normals.push(cross(\n        cartesian(hexagon[(i * 2 + 2) % (2 * n)]),\n        cartesian(hexagon[(i * 2 + 1) % (2 * n)])\n      ));\n    }\n  });\n\n  var faces = w5.map(function(face) {\n    return {\n      project: faceProjection(face),\n      face: face\n    };\n  });\n\n  parents.forEach(function(d, i) {\n    var parent = faces[d];\n    parent && (parent.children || (parent.children = [])).push(faces[i]);\n  });\n\n  function face(lambda, phi) {\n    var cosphi = cos(phi),\n        p = [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n\n    var hexagon = lambda < -pi / 2 ? phi < 0 ? 6 : 4\n        : lambda < 0 ? phi < 0 ? 2 : 0\n        : lambda < pi / 2 ? phi < 0 ? 3 : 1\n        : phi < 0 ? 7 : 5;\n\n    var n = cornerNormals[hexagon];\n\n    return faces[dot(n[0], p) < 0 ? 8 + 3 * hexagon\n        : dot(n[1], p) < 0 ? 8 + 3 * hexagon + 1\n        : dot(n[2], p) < 0 ? 8 + 3 * hexagon + 2\n        : hexagon];\n  }\n\n  return polyhedral(faces[0], face)\n      .angle(-30)\n      .scale(110.625)\n      .center([0,45]);\n}\n\nfunction dot(a, b) {\n  for (var i = 0, n = a.length, s = 0; i < n; ++i) s += a[i] * b[i];\n  return s;\n}\n\nfunction cross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0]\n  ];\n}\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  var lambda = coordinates[0] * radians,\n      phi = coordinates[1] * radians,\n      cosphi = cos(phi);\n  return [\n    cosphi * cos(lambda),\n    cosphi * sin(lambda),\n    sin(phi)\n  ];\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, halfPi, pi, sign, sqrt1_2} from \"../math.js\";\n\nexport default function(project) {\n  var dx = project(halfPi, 0)[0] - project(-halfPi, 0)[0];\n\n  function projectQuincuncial(lambda, phi) {\n    var t = abs(lambda) < halfPi,\n        p = project(t ? lambda : lambda > 0 ? lambda - pi : lambda + pi, phi),\n        x = (p[0] - p[1]) * sqrt1_2,\n        y = (p[0] + p[1]) * sqrt1_2;\n    if (t) return [x, y];\n    var d = dx * sqrt1_2,\n        s = x > 0 ^ y > 0 ? -1 : 1;\n    return [s * x - sign(y) * d, s * y - sign(x) * d];\n  }\n\n  if (project.invert) projectQuincuncial.invert = function(x0, y0) {\n    var x = (x0 + y0) * sqrt1_2,\n        y = (y0 - x0) * sqrt1_2,\n        t = abs(x) < 0.5 * dx && abs(y) < 0.5 * dx;\n\n    if (!t) {\n      var d = dx * sqrt1_2,\n          s = x > 0 ^ y > 0 ? -1 : 1,\n          x1 = -s * x0 + (y > 0 ? 1 : -1) * d,\n          y1 = -s * y0 + (x > 0 ? 1 : -1) * d;\n      x = (-x1 - y1) * sqrt1_2;\n      y = (x1 - y1) * sqrt1_2;\n    }\n\n    var p = project.invert(x, y);\n    if (!t) p[0] += x > 0 ? pi : -pi;\n    return p;\n  };\n\n  return projection(projectQuincuncial)\n      .rotate([-90, -90, 45])\n      .clipAngle(180 - 1e-3);\n}\n","import {abs, acos, asin, atan, cos, epsilon, pi, sin, tan} from \"./math.js\";\nimport parallel1 from \"./parallel1.js\";\n\nexport function rectangularPolyconicRaw(phi0) {\n  var sinPhi0 = sin(phi0);\n\n  function forward(lambda, phi) {\n    var A = sinPhi0 ? tan(lambda * sinPhi0 / 2) / sinPhi0 : lambda / 2;\n    if (!phi) return [2 * A, -phi0];\n    var E = 2 * atan(A * sin(phi)),\n        cotPhi = 1 / tan(phi);\n    return [\n      sin(E) * cotPhi,\n      phi + (1 - cos(E)) * cotPhi - phi0\n    ];\n  }\n\n  // TODO return null for points outside outline.\n  forward.invert = function(x, y) {\n    if (abs(y += phi0) < epsilon) return [sinPhi0 ? 2 * atan(sinPhi0 * x / 2) / sinPhi0 : x, 0];\n    var k = x * x + y * y,\n        phi = 0,\n        i = 10, delta;\n    do {\n      var tanPhi = tan(phi),\n          secPhi = 1 / cos(phi),\n          j = k - 2 * y * phi + phi * phi;\n      phi -= delta = (tanPhi * j + 2 * (phi - y)) / (2 + j * secPhi * secPhi + 2 * (phi - y) * tanPhi);\n    } while (abs(delta) > epsilon && --i > 0);\n    var E = x * (tanPhi = tan(phi)),\n        A = tan(abs(y) < abs(phi + 1 / tanPhi) ? asin(E) * 0.5 : acos(E) * 0.5 + pi / 4) / sin(phi);\n    return [\n      sinPhi0 ? 2 * atan(sinPhi0 * A) / sinPhi0 : 2 * A,\n      phi\n    ];\n  };\n\n  return forward;\n}\n\nexport default function() {\n  return parallel1(rectangularPolyconicRaw)\n      .scale(131.215);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, degrees, epsilon2, floor, max, min, pi, radians, sign} from \"./math.js\";\n\nvar K = [\n  [0.9986, -0.062],\n  [1.0000, 0.0000],\n  [0.9986, 0.0620],\n  [0.9954, 0.1240],\n  [0.9900, 0.1860],\n  [0.9822, 0.2480],\n  [0.9730, 0.3100],\n  [0.9600, 0.3720],\n  [0.9427, 0.4340],\n  [0.9216, 0.4958],\n  [0.8962, 0.5571],\n  [0.8679, 0.6176],\n  [0.8350, 0.6769],\n  [0.7986, 0.7346],\n  [0.7597, 0.7903],\n  [0.7186, 0.8435],\n  [0.6732, 0.8936],\n  [0.6213, 0.9394],\n  [0.5722, 0.9761],\n  [0.5322, 1.0000]\n];\n\nK.forEach(function(d) {\n  d[1] *= 1.593415793900743;\n});\n\nexport function robinsonRaw(lambda, phi) {\n  var i = min(18, abs(phi) * 36 / pi),\n      i0 = floor(i),\n      di = i - i0,\n      ax = (k = K[i0])[0],\n      ay = k[1],\n      bx = (k = K[++i0])[0],\n      by = k[1],\n      cx = (k = K[min(19, ++i0)])[0],\n      cy = k[1],\n      k;\n  return [\n    lambda * (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    sign(phi) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2)\n  ];\n}\n\nrobinsonRaw.invert = function(x, y) {\n  var phi = y * 90,\n      i = min(18, abs(phi / 5)),\n      i0 = max(0, floor(i));\n  do {\n    var ay = K[i0][1],\n        by = K[i0 + 1][1],\n        cy = K[min(19, i0 + 2)][1],\n        u = cy - ay,\n        v = cy - 2 * by + ay,\n        t = 2 * (abs(y) - by) / u,\n        c = v / u,\n        di = t * (1 - c * t * (1 - 2 * c * t));\n    if (di >= 0 || i0 === 1) {\n      phi = (y >= 0 ? 5 : -5) * (di + i);\n      var j = 50, delta;\n      do {\n        i = min(18, abs(phi) / 5);\n        i0 = floor(i);\n        di = i - i0;\n        ay = K[i0][1];\n        by = K[i0 + 1][1];\n        cy = K[min(19, i0 + 2)][1];\n        phi -= (delta = sign(y) * (by + di * (cy - ay) / 2 + di * di * (cy - 2 * by + ay) / 2) - y) * degrees;\n      } while (abs(delta) > epsilon2 && --j > 0);\n      break;\n    }\n  } while (--i0 >= 0);\n  var ax = K[i0][0],\n      bx = K[i0 + 1][0],\n      cx = K[min(19, i0 + 2)][0];\n  return [\n    x / (bx + di * (cx - ax) / 2 + di * di * (cx - 2 * bx + ax) / 2),\n    phi * radians\n  ];\n};\n\nexport default function() {\n  return projection(robinsonRaw)\n      .scale(152.63);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, radians, sin, sqrt} from \"./math.js\";\n\nfunction satelliteVerticalRaw(P) {\n  function forward(lambda, phi) {\n    var cosPhi = cos(phi),\n        k = (P - 1) / (P - cosPhi * cos(lambda));\n    return [\n      k * cosPhi * sin(lambda),\n      k * sin(phi)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var rho2 = x * x + y * y,\n        rho = sqrt(rho2),\n        sinc = (P - sqrt(1 - rho2 * (P + 1) / (P - 1))) / ((P - 1) / rho + rho / (P - 1));\n    return [\n      atan2(x * sinc, rho * sqrt(1 - sinc * sinc)),\n      rho ? asin(y * sinc / rho) : 0\n    ];\n  };\n\n  return forward;\n}\n\nexport function satelliteRaw(P, omega) {\n  var vertical = satelliteVerticalRaw(P);\n  if (!omega) return vertical;\n  var cosOmega = cos(omega),\n      sinOmega = sin(omega);\n\n  function forward(lambda, phi) {\n    var coordinates = vertical(lambda, phi),\n        y = coordinates[1],\n        A = y * sinOmega / (P - 1) + cosOmega;\n    return [\n      coordinates[0] * cosOmega / A,\n      y / A\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var k = (P - 1) / (P - 1 - y * sinOmega);\n    return vertical.invert(k * x, k * y * cosOmega);\n  };\n\n  return forward;\n}\n\nexport default function() {\n  var distance = 2,\n      omega = 0,\n      m = projectionMutator(satelliteRaw),\n      p = m(distance, omega);\n\n  // As a multiple of radius.\n  p.distance = function(_) {\n    if (!arguments.length) return distance;\n    return m(distance = +_, omega);\n  };\n\n  p.tilt = function(_) {\n    if (!arguments.length) return omega * degrees;\n    return m(distance, omega = _ * radians);\n  };\n\n  return p\n      .scale(432.147)\n      .clipAngle(acos(1 / distance) * degrees - 1e-6);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {atan, quarterPi, sin, tan} from \"./math.js\";\n\nexport function timesRaw(lambda, phi) {\n  var t = tan(phi / 2),\n      s = sin(quarterPi * t);\n  return [\n    lambda * (0.74482 - 0.34588 * s * s),\n    1.70711 * t\n  ];\n}\n\ntimesRaw.invert = function(x, y) {\n  var t = y / 1.70711,\n      s = sin(quarterPi * t);\n  return [\n    x / (0.74482 - 0.34588 * s * s),\n    2 * atan(t)\n  ];\n};\n\nexport default function() {\n  return projection(timesRaw)\n      .scale(146.153);\n}\n","import {geoInterpolate as interpolate, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\nimport {asin, degrees, pi, sin, radians} from \"./math.js\";\n\n// Compute the origin as the midpoint of the two reference points.\n// Rotate one of the reference points by the origin.\n// Apply the spherical law of sines to compute gamma rotation.\nexport default function(raw, p0, p1) {\n  var i = interpolate(p0, p1),\n      o = i(0.5),\n      a = rotation([-o[0], -o[1]])(p0),\n      b = i.distance / 2,\n      y = -asin(sin(a[1] * radians) / sin(b)),\n      R = [-o[0], -o[1], -(a[0] > 0 ? pi - y : y) * degrees],\n      p = projection(raw(b)).rotate(R),\n      r = rotation(R),\n      center = p.center;\n\n  delete p.rotate;\n\n  p.center = function(_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n\n  return p\n      .clipAngle(90);\n}\n","import {geoGnomonicRaw as gnomonicRaw} from \"d3-geo\";\nimport {cos} from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\n\nexport function twoPointAzimuthalRaw(d) {\n  var cosd = cos(d);\n\n  function forward(lambda, phi) {\n    var coordinates = gnomonicRaw(lambda, phi);\n    coordinates[0] *= cosd;\n    return coordinates;\n  }\n\n  forward.invert = function(x, y) {\n    return gnomonicRaw.invert(x / cosd, y);\n  };\n\n  return forward;\n}\n\nexport function twoPointAzimuthalUsa() {\n  return twoPointAzimuthal([-158, 21.5], [-77, 39])\n      .clipAngle(60)\n      .scale(400);\n}\n\nexport default function twoPointAzimuthal(p0, p1) {\n  return twoPoint(twoPointAzimuthalRaw, p0, p1);\n}\n","import {geoAzimuthalEquidistantRaw as azimuthalEquidistantRaw} from \"d3-geo\";\nimport {acos, atan2, cos, sin, sqrt, tan} from \"./math.js\";\nimport twoPoint from \"./twoPoint.js\";\n\nexport function twoPointEquidistantRaw(z0) {\n  if (!(z0 *= 2)) return azimuthalEquidistantRaw;\n  var lambdaa = -z0 / 2,\n      lambdab = -lambdaa,\n      z02 = z0 * z0,\n      tanLambda0 = tan(lambdab),\n      S = 0.5 / sin(lambdab);\n\n  function forward(lambda, phi) {\n    var za = acos(cos(phi) * cos(lambda - lambdaa)),\n        zb = acos(cos(phi) * cos(lambda - lambdab)),\n        ys = phi < 0 ? -1 : 1;\n    za *= za, zb *= zb;\n    return [\n      (za - zb) / (2 * z0),\n      ys * sqrt(4 * z02 * zb - (z02 - za + zb) * (z02 - za + zb)) / (2 * z0)\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var y2 = y * y,\n        cosza = cos(sqrt(y2 + (t = x + lambdaa) * t)),\n        coszb = cos(sqrt(y2 + (t = x + lambdab) * t)),\n        t,\n        d;\n    return [\n      atan2(d = cosza - coszb, t = (cosza + coszb) * tanLambda0),\n      (y < 0 ? -1 : 1) * acos(sqrt(t * t + d * d) * S)\n    ];\n  };\n\n  return forward;\n}\n\nexport function twoPointEquidistantUsa() {\n  return twoPointEquidistant([-158, 21.5], [-77, 39])\n      .clipAngle(130)\n      .scale(122.571);\n}\n\nexport default function twoPointEquidistant(p0, p1) {\n  return twoPoint(twoPointEquidistantRaw, p0, p1);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, acos, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrintenRaw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      G = cosTheta / (sinTheta + cosTheta - 1),\n      P = G * (2 / sinTheta - 1),\n      P2 = P * P,\n      P2_A2 = P2 + A2,\n      G_P2 = G - P2,\n      Q = A2 + G;\n  return [\n    sign(lambda) * pi * (A * G_P2 + sqrt(A2 * G_P2 * G_P2 - P2_A2 * (G * G - P2))) / P2_A2,\n    sign(phi) * pi * (P * Q - A * sqrt((A2 + 1) * P2_A2 - Q * Q)) / P2_A2\n  ];\n}\n\nvanDerGrintenRaw.invert = function(x, y) {\n  if (abs(y) < epsilon) return [x, 0];\n  if (abs(x) < epsilon) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x2 = (x /= pi) * x,\n      y2 = (y /= pi) * y,\n      x2_y2 = x2 + y2,\n      z = x2_y2 * x2_y2,\n      c1 = -abs(y) * (1 + x2_y2),\n      c2 = c1 - 2 * y2 + x2,\n      c3 = -2 * c1 + 1 + 2 * y2 + z,\n      d = y2 / c3 + (2 * c2 * c2 * c2 / (c3 * c3 * c3) - 9 * c1 * c2 / (c3 * c3)) / 27,\n      a1 = (c1 - c2 * c2 / (3 * c3)) / c3,\n      m1 = 2 * sqrt(-a1 / 3),\n      theta1 = acos(3 * d / (a1 * m1)) / 3;\n  return [\n    pi * (x2_y2 - 1 + sqrt(1 + 2 * (x2 - y2) + z)) / (2 * x),\n    sign(y) * pi * (-m1 * cos(theta1 + pi / 3) - c2 / (3 * c3))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrintenRaw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, atan2, cos, halfPi, epsilon, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten2Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = abs(phi / halfPi),\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, sign(phi) * pi * tan(theta / 2)];\n  var cosTheta = cos(theta),\n      A = abs(pi / lambda - lambda / pi) / 2,\n      A2 = A * A,\n      x1 = cosTheta * (sqrt(1 + A2) - A * cosTheta) / (1 + A2 * sinTheta * sinTheta);\n  return [\n    sign(lambda) * pi * x1,\n    sign(phi) * pi * sqrt(1 - x1 * (2 * A + x1))\n  ];\n}\n\nvanDerGrinten2Raw.invert = function(x, y) {\n  if (!x) return [0, halfPi * sin(2 * atan(y / pi))];\n  var x1 = abs(x / pi),\n      A = (1 - x1 * x1 - (y /= pi) * y) / (2 * x1),\n      A2 = A * A,\n      B = sqrt(A2 + 1);\n  return [\n    sign(x) * pi * (B - A),\n    sign(y) * halfPi * sin(2 * atan2(sqrt((1 - 2 * A * x1) * (A + B) - x1), sqrt(B + A + x1)))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten2Raw)\n      .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, asin, atan, cos, epsilon, halfPi, pi, sign, sin, sqrt, tan} from \"./math.js\";\n\nexport function vanDerGrinten3Raw(lambda, phi) {\n  if (abs(phi) < epsilon) return [lambda, 0];\n  var sinTheta = phi / halfPi,\n      theta = asin(sinTheta);\n  if (abs(lambda) < epsilon || abs(abs(phi) - halfPi) < epsilon) return [0, pi * tan(theta / 2)];\n  var A = (pi / lambda - lambda / pi) / 2,\n      y1 = sinTheta / (1 + cos(theta));\n  return [\n    pi * (sign(lambda) * sqrt(A * A + 1 - y1 * y1) - A),\n    pi * y1\n  ];\n}\n\nvanDerGrinten3Raw.invert = function(x, y) {\n  if (!y) return [x, 0];\n  var y1 = y / pi,\n      A = (pi * pi * (1 - y1 * y1) - x * x) / (2 * pi * x);\n  return [\n    x ? pi * (sign(x) * sqrt(A * A + 1) - A) : 0,\n    halfPi * sin(2 * atan(y1))\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten3Raw)\n        .scale(79.4183);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {abs, epsilon, halfPi, min, pi, sign, sqrt} from \"./math.js\";\n\nexport function vanDerGrinten4Raw(lambda, phi) {\n  if (!phi) return [lambda, 0];\n  var phi0 = abs(phi);\n  if (!lambda || phi0 === halfPi) return [0, phi];\n  var B = phi0 / halfPi,\n      B2 = B * B,\n      C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n      C2 = C * C,\n      BC = B * C,\n      B_C2 = B2 + C2 + 2 * BC,\n      B_3C = B + 3 * C,\n      lambda0 = lambda / halfPi,\n      lambda1 = lambda0 + 1 / lambda0,\n      D = sign(abs(lambda) - halfPi) * sqrt(lambda1 * lambda1 - 4),\n      D2 = D * D,\n      F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + 12 * BC * C2 + 4 * C2 * C2),\n      x1 = (D * (B_C2 + C2 - 1) + 2 * sqrt(F)) / (4 * B_C2 + D2);\n  return [\n    sign(lambda) * halfPi * x1,\n    sign(phi) * halfPi * sqrt(1 + D * abs(x1) - x1 * x1)\n  ];\n}\n\nvanDerGrinten4Raw.invert = function(x, y) {\n  var delta;\n  if (!x || !y) return [x, y];\n  var sy = sign(y);\n  y = abs(y) / pi;\n  var x1 = sign(x) * x / halfPi,\n      D = (x1 * x1 - 1 + 4 * y * y) / abs(x1),\n      D2 = D * D,\n      B = y * (2 - (y > 0.5 ? min(y, abs(x)) : 0)),\n      r = x * x + y * y,\n      i = 50;\n  do {\n    var B2 = B * B,\n        C = (8 * B - B2 * (B2 + 2) - 5) / (2 * B2 * (B - 1)),\n        C_ = (3 * B - B2 * B - 10) / (2 * B2 * B),\n        C2 = C * C,\n        BC = B * C,\n        B_C = B + C,\n        B_C2 = B_C * B_C,\n        B_3C = B + 3 * C,\n        F = B_C2 * (B2 + C2 * D2 - 1) + (1 - B2) * (B2 * (B_3C * B_3C + 4 * C2) + C2 * (12 * BC + 4 * C2)),\n        F_ = -2 * B_C * (4 * BC * C2 + (1 - 4 * B2 + 3 * B2 * B2) * (1 + C_) + C2 * (-6 + 14 * B2 - D2 + (-8 + 8 * B2 - 2 * D2) * C_) + BC * (-8 + 12 * B2 + (-10 + 10 * B2 - D2) * C_)),\n        sqrtF = sqrt(F),\n        f = D * (B_C2 + C2 - 1) + 2 * sqrtF - x1 * (4 * B_C2 + D2),\n        f_ = D * (2 * C * C_ + 2 * B_C * (1 + C_)) + F_ / sqrtF - 8 * B_C * (D * (-1 + C2 + B_C2) + 2 * sqrtF) * (1 + C_) / (D2 + 4 * B_C2);\n    B -= delta = f / f_;\n  } while (delta * r * r > epsilon && --i > 0);\n  return [\n    sign(x) * (sqrt(D * D + 4) + D) * pi / 4,\n    sy * halfPi * B\n  ];\n};\n\nexport default function() {\n  return projection(vanDerGrinten4Raw)\n      .scale(127.16);\n}\n","import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\nimport {acos, asin, atan2, cos, degrees, epsilon, halfPi, max, min, pi, radians, sin, sqrt, tan} from \"./math.js\";\n\nfunction wagnerFormula(cx, cy, m1, m2, n) {\n  function forward(lambda, phi) {\n    var s = m1 * sin(m2 * phi),\n        c0 = sqrt(1 - s * s),\n        c1 = sqrt(2 / (1 + c0 * cos(lambda *= n)));\n    return [\n      cx * c0 * c1 * sin(lambda),\n      cy * s * c1\n    ];\n  }\n\n  forward.invert = function(x, y) {\n    var t1 = x / cx,\n        t2 = y / cy,\n        p = sqrt(t1 * t1 + t2 * t2),\n        c = 2 * asin(p / 2);\n    return [\n      atan2(x * tan(c), cx * p) / n,\n      p && asin(y * sin(c) / (cy * m1 * p)) / m2\n    ];\n  };\n\n  return forward;\n}\n\nexport function wagnerRaw(poleline, parallels, inflation, ratio) {\n  // 60 is always used as reference parallel\n  var phi1 = pi / 3;\n\n  // sanitizing the input values\n  // poleline and parallels may approximate but never equal 0\n  poleline = max(poleline, epsilon);\n  parallels = max(parallels, epsilon);\n  // poleline must be <= 90; parallels may approximate but never equal 180\n  poleline = min(poleline, halfPi);\n  parallels = min(parallels, pi - epsilon);\n  // 0 <= inflation <= 99.999\n  inflation = max(inflation, 0);\n  inflation = min(inflation, 100 - epsilon);\n  // ratio > 0.\n  // sensible values, i.e. something that renders a map which still can be\n  // recognized as world map, are e.g. 20 <= ratio <= 1000.\n  ratio = max(ratio, epsilon);\n\n  // convert values from boehm notation\n  // areal inflation e.g. from 0 to 1 or 20 to 1.2:\n  var vinflation = inflation/100 + 1;\n  // axial ratio e.g. from 200 to 2:\n  var vratio  = ratio / 100;\n  // the other ones are a bit more complicated...\n  var m2 = acos(vinflation * cos(phi1)) / phi1,\n      m1 = sin(poleline) / sin(m2 * halfPi),\n      n = parallels / pi,\n      k = sqrt(vratio * sin(poleline / 2) / sin(parallels / 2)),\n      cx = k / sqrt(n * m1 * m2),\n      cy = 1 / (k * sqrt(n * m1 * m2));\n\n  return wagnerFormula(cx, cy, m1, m2, n);\n}\n\nexport default function wagner() {\n  // default values generate wagner8\n  var poleline = 65 * radians,\n      parallels = 60 * radians,\n      inflation = 20,\n      ratio = 200,\n      mutate = projectionMutator(wagnerRaw),\n      projection = mutate(poleline, parallels, inflation, ratio);\n\n  projection.poleline = function(_) {\n    return arguments.length ? mutate(poleline = +_ * radians, parallels, inflation, ratio) : poleline * degrees;\n  };\n\n  projection.parallels = function(_) {\n    return arguments.length ? mutate(poleline, parallels = +_ * radians, inflation, ratio) : parallels * degrees;\n  };\n  projection.inflation = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation = +_, ratio) : inflation;\n  };\n  projection.ratio = function(_) {\n    return arguments.length ? mutate(poleline, parallels, inflation, ratio = +_) : ratio;\n  };\n\n  return projection\n    .scale(163.775);\n}\n\nexport function wagner7() {\n  return wagner()\n      .poleline(65)\n      .parallels(60)\n      .inflation(0)\n      .ratio(200)\n      .scale(172.633);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {sqrt, pi} from \"./math.js\";\nimport {mollweideBromleyRaw} from \"./mollweide.js\";\n\nvar A = 4 * pi + 3 * sqrt(3),\n    B = 2 * sqrt(2 * pi * sqrt(3) / A);\n\nexport var wagner4Raw = mollweideBromleyRaw(B * sqrt(3) / pi, B, A / 6);\n\nexport default function() {\n  return projection(wagner4Raw)\n      .scale(176.84);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {pi, sqrt} from \"./math.js\";\n\nexport function wagner6Raw(lambda, phi) {\n  return [lambda * sqrt(1 - 3 * phi * phi / (pi * pi)), phi];\n}\n\nwagner6Raw.invert = function(x, y) {\n  return [x / sqrt(1 - 3 * y * y / (pi * pi)), y];\n};\n\nexport default function() {\n  return projection(wagner6Raw)\n      .scale(152.63);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function wiechelRaw(lambda, phi) {\n  var cosPhi = cos(phi),\n      sinPhi = cos(lambda) * cosPhi,\n      sin1_Phi = 1 - sinPhi,\n      cosLambda = cos(lambda = atan2(sin(lambda) * cosPhi, -sin(phi))),\n      sinLambda = sin(lambda);\n  cosPhi = sqrt(1 - sinPhi * sinPhi);\n  return [\n    sinLambda * cosPhi - cosLambda * sin1_Phi,\n    -cosLambda * cosPhi - sinLambda * sin1_Phi\n  ];\n}\n\nwiechelRaw.invert = function(x, y) {\n  var w = (x * x + y * y) / -2,\n      k = sqrt(-w * (2 + w)),\n      b = y * w + x * k,\n      a = x * w - y * k,\n      D = sqrt(a * a + b * b);\n  return [\n    atan2(k * b, D * (1 + w)),\n    D ? -asin(k * a / D) : 0\n  ];\n};\n\nexport default function() {\n  return projection(wiechelRaw)\n      .rotate([0, -90, 45])\n      .scale(124.75)\n      .clipAngle(180 - 1e-3);\n}\n","import {geoProjection as projection} from \"d3-geo\";\nimport {aitoffRaw} from \"./aitoff.js\";\nimport {halfPi, epsilon, sin, cos, sqrt, abs, acos} from \"./math.js\";\n\nexport function winkel3Raw(lambda, phi) {\n  var coordinates = aitoffRaw(lambda, phi);\n  return [\n    (coordinates[0] + lambda / halfPi) / 2,\n    (coordinates[1] + phi) / 2\n  ];\n}\n\nwinkel3Raw.invert = function(x, y) {\n  var lambda = x, phi = y, i = 25;\n  do {\n    var cosphi = cos(phi),\n        sinphi = sin(phi),\n        sin_2phi = sin(2 * phi),\n        sin2phi = sinphi * sinphi,\n        cos2phi = cosphi * cosphi,\n        sinlambda = sin(lambda),\n        coslambda_2 = cos(lambda / 2),\n        sinlambda_2 = sin(lambda / 2),\n        sin2lambda_2 = sinlambda_2 * sinlambda_2,\n        C = 1 - cos2phi * coslambda_2 * coslambda_2,\n        E = C ? acos(cosphi * coslambda_2) * sqrt(F = 1 / C) : F = 0,\n        F,\n        fx = 0.5 * (2 * E * cosphi * sinlambda_2 + lambda / halfPi) - x,\n        fy = 0.5 * (E * sinphi + phi) - y,\n        dxdlambda = 0.5 * F * (cos2phi * sin2lambda_2 + E * cosphi * coslambda_2 * sin2phi) + 0.5 / halfPi,\n        dxdphi = F * (sinlambda * sin_2phi / 4 - E * sinphi * sinlambda_2),\n        dydlambda = 0.125 * F * (sin_2phi * sinlambda_2 - E * sinphi * cos2phi * sinlambda),\n        dydphi = 0.5 * F * (sin2phi * coslambda_2 + E * sin2lambda_2 * cosphi) + 0.5,\n        denominator = dxdphi * dydlambda - dydphi * dxdlambda,\n        dlambda = (fy * dxdphi - fx * dydphi) / denominator,\n        dphi = (fx * dydlambda - fy * dxdlambda) / denominator;\n    lambda -= dlambda, phi -= dphi;\n  } while ((abs(dlambda) > epsilon || abs(dphi) > epsilon) && --i > 0);\n  return [lambda, phi];\n};\n\nexport default function() {\n  return projection(winkel3Raw)\n      .scale(158.837);\n}\n","import {projection} from 'vega-projection';\nimport {\n  geoAiry,\n  geoAitoff,\n  geoArmadillo,\n  geoAugust,\n  geoBaker,\n  geoBerghaus,\n  geoBertin1953,\n  geoBoggs,\n  geoBonne,\n  geoBottomley,\n  geoBromley,\n  geoChamberlinAfrica,\n  geoCollignon,\n  geoCraig,\n  geoCraster,\n  geoCylindricalEqualArea,\n  geoCylindricalStereographic,\n  geoEckert1,\n  geoEckert2,\n  geoEckert3,\n  geoEckert4,\n  geoEckert5,\n  geoEckert6,\n  geoEisenlohr,\n  geoFahey,\n  geoFoucaut,\n  geoFoucautSinusoidal,\n  geoGilbert,\n  geoGingery,\n  geoGinzburg4,\n  geoGinzburg5,\n  geoGinzburg6,\n  geoGinzburg8,\n  geoGinzburg9,\n  geoGringorten,\n  geoGringortenQuincuncial,\n  geoGuyou,\n  geoHammer,\n  geoHammerRetroazimuthal,\n  geoHealpix,\n  geoHill,\n  geoHomolosine,\n  geoHufnagel,\n  geoHyperelliptical,\n  geoInterruptedBoggs,\n  geoInterruptedHomolosine,\n  geoInterruptedMollweide,\n  geoInterruptedMollweideHemispheres,\n  geoInterruptedQuarticAuthalic,\n  geoInterruptedSinuMollweide,\n  geoInterruptedSinusoidal,\n  geoKavrayskiy7,\n  geoLagrange,\n  geoLarrivee,\n  geoLaskowski,\n  geoLittrow,\n  geoLoximuthal,\n  geoMiller,\n  geoModifiedStereographicAlaska,\n  geoModifiedStereographicGs48,\n  geoModifiedStereographicGs50,\n  geoModifiedStereographicLee,\n  geoModifiedStereographicMiller,\n  geoMtFlatPolarParabolic,\n  geoMtFlatPolarQuartic,\n  geoMtFlatPolarSinusoidal,\n  geoNaturalEarth2,\n  geoNellHammer,\n  geoNicolosi,\n  geoPatterson,\n  geoPeirceQuincuncial,\n  geoPolyconic,\n  geoPolyhedralButterfly,\n  geoPolyhedralCollignon,\n  geoPolyhedralWaterman,\n  geoRectangularPolyconic,\n  geoRobinson,\n  geoSatellite,\n  geoSinuMollweide,\n  geoSinusoidal,\n  geoTimes,\n  geoTwoPointAzimuthalUsa,\n  geoTwoPointEquidistantUsa,\n  geoVanDerGrinten,\n  geoVanDerGrinten2,\n  geoVanDerGrinten3,\n  geoVanDerGrinten4,\n  geoWagner,\n  geoWagner4,\n  geoWagner6,\n  geoWagner7,\n  geoWiechel,\n  geoWinkel3\n} from 'd3-geo-projection';\n\nprojection('airy', geoAiry);\nprojection('aitoff', geoAitoff);\nprojection('armadillo', geoArmadillo);\nprojection('august', geoAugust);\nprojection('baker', geoBaker);\nprojection('berghaus', geoBerghaus);\nprojection('bertin1953', geoBertin1953);\nprojection('boggs', geoBoggs);\nprojection('bonne', geoBonne);\nprojection('bottomley', geoBottomley);\nprojection('bromley', geoBromley);\nprojection('chamberlinAfrica', geoChamberlinAfrica);\nprojection('collignon', geoCollignon);\nprojection('craig', geoCraig);\nprojection('craster', geoCraster);\nprojection('cylindricalEqualArea', geoCylindricalEqualArea);\nprojection('cylindricalStereographic', geoCylindricalStereographic);\nprojection('eckert1', geoEckert1);\nprojection('eckert2', geoEckert2);\nprojection('eckert3', geoEckert3);\nprojection('eckert4', geoEckert4);\nprojection('eckert5', geoEckert5);\nprojection('eckert6', geoEckert6);\nprojection('eisenlohr', geoEisenlohr);\nprojection('fahey', geoFahey);\nprojection('foucaut', geoFoucaut);\nprojection('foucautSinusoidal', geoFoucautSinusoidal);\nprojection('gilbert', geoGilbert);\nprojection('gingery', geoGingery);\nprojection('ginzburg4', geoGinzburg4);\nprojection('ginzburg5', geoGinzburg5);\nprojection('ginzburg6', geoGinzburg6);\nprojection('ginzburg8', geoGinzburg8);\nprojection('ginzburg9', geoGinzburg9);\nprojection('gringorten', geoGringorten);\nprojection('gringortenQuincuncial', geoGringortenQuincuncial);\nprojection('guyou', geoGuyou);\nprojection('hammer', geoHammer);\nprojection('hammerRetroazimuthal', geoHammerRetroazimuthal);\nprojection('healpix', geoHealpix);\nprojection('hill', geoHill);\nprojection('homolosine', geoHomolosine);\nprojection('hufnagel', geoHufnagel);\nprojection('hyperelliptical', geoHyperelliptical);\nprojection('interruptedBoggs', geoInterruptedBoggs);\nprojection('interruptedHomolosine', geoInterruptedHomolosine);\nprojection('interruptedMollweide', geoInterruptedMollweide);\nprojection('interruptedMollweideHemispheres', geoInterruptedMollweideHemispheres);\nprojection('interruptedQuarticAuthalic', geoInterruptedQuarticAuthalic);\nprojection('interruptedSinuMollweide', geoInterruptedSinuMollweide);\nprojection('interruptedSinusoidal', geoInterruptedSinusoidal);\nprojection('kavrayskiy7', geoKavrayskiy7);\nprojection('lagrange', geoLagrange);\nprojection('larrivee', geoLarrivee);\nprojection('laskowski', geoLaskowski);\nprojection('littrow', geoLittrow);\nprojection('loximuthal', geoLoximuthal);\nprojection('miller', geoMiller);\nprojection('modifiedStereographicAlaska', geoModifiedStereographicAlaska);\nprojection('modifiedStereographicGs48', geoModifiedStereographicGs48);\nprojection('modifiedStereographicGs50', geoModifiedStereographicGs50);\nprojection('modifiedStereographicLee', geoModifiedStereographicLee);\nprojection('modifiedStereographicMiller', geoModifiedStereographicMiller);\nprojection('mtFlatPolarParabolic', geoMtFlatPolarParabolic);\nprojection('mtFlatPolarQuartic', geoMtFlatPolarQuartic);\nprojection('mtFlatPolarSinusoidal', geoMtFlatPolarSinusoidal);\nprojection('naturalEarth2', geoNaturalEarth2);\nprojection('nellHammer', geoNellHammer);\nprojection('nicolosi', geoNicolosi);\nprojection('patterson', geoPatterson);\nprojection('peirceQuincuncial', geoPeirceQuincuncial);\nprojection('polyconic', geoPolyconic);\nprojection('polyhedralButterfly', geoPolyhedralButterfly);\nprojection('polyhedralCollignon', geoPolyhedralCollignon);\nprojection('polyhedralWaterman', geoPolyhedralWaterman);\nprojection('rectangularPolyconic', geoRectangularPolyconic);\nprojection('robinson', geoRobinson);\nprojection('satellite', geoSatellite);\nprojection('sinuMollweide', geoSinuMollweide);\nprojection('sinusoidal', geoSinusoidal);\nprojection('times', geoTimes);\nprojection('twoPointAzimuthalUsa', geoTwoPointAzimuthalUsa);\nprojection('twoPointEquidistantUsa', geoTwoPointEquidistantUsa);\nprojection('vanDerGrinten', geoVanDerGrinten);\nprojection('vanDerGrinten2', geoVanDerGrinten2);\nprojection('vanDerGrinten3', geoVanDerGrinten3);\nprojection('vanDerGrinten4', geoVanDerGrinten4);\nprojection('wagner', geoWagner);\nprojection('wagner4', geoWagner4);\nprojection('wagner6', geoWagner6);\nprojection('wagner7', geoWagner7);\nprojection('wiechel', geoWiechel);\nprojection('winkel3', geoWinkel3);\n","import {geoProjection as projection} from \"d3-geo\";\nimport {hammerRaw} from \"./hammer.js\";\nimport {cos, pi, sin} from \"./math.js\";\nimport {solve2d} from \"./newton.js\";\n\n// Bertin 1953 as a modified Briesemeister\n// https://bl.ocks.org/Fil/5b9ee9636dfb6ffa53443c9006beb642\nexport function bertin1953Raw() {\n  var hammer = hammerRaw(1.68, 2),\n      fu = 1.4, k = 12;\n\n  function forward(lambda, phi) {\n\n    if (lambda + phi < -fu) {\n      var u = (lambda - phi + 1.6) * (lambda + phi + fu) / 8;\n      lambda += u;\n      phi -= 0.8 * u * sin(phi + pi / 2);\n    }\n\n    var r = hammer(lambda, phi);\n\n    var d = (1 - cos(lambda * phi)) / k;\n\n    if (r[1] < 0) {\n      r[0] *= 1 + d;\n    }\n    if (r[1] > 0) {\n      r[1] *= 1 + d / 1.5 * r[0] * r[0];\n    }\n\n    return r;\n  }\n  \n  forward.invert = solve2d(forward);\n  return forward;\n}\n\nexport default function() {\n  // this projection should not be rotated\n  return projection(bertin1953Raw())\n    .rotate([-16.5, -42])\n    .scale(176.57)\n    .center([7.93, 0.09]);\n}\n","import {gringortenRaw} from \"../gringorten.js\";\nimport quincuncial from \"./index.js\";\n\nexport default function() {\n  return quincuncial(gringortenRaw)\n      .scale(176.423);\n}\n","import {guyouRaw} from \"../guyou.js\";\nimport quincuncial from \"./index.js\";\n\nexport default function() {\n  return quincuncial(guyouRaw)\n      .scale(111.48);\n}\n","import {geoCentroid as centroid, geoGnomonic as gnomonic} from \"d3-geo\";\nimport {pi} from \"../math.js\";\nimport polyhedral from \"./index.js\";\nimport octahedron from \"./octahedron.js\";\n\nexport default function(faceProjection) {\n\n  faceProjection = faceProjection || function(face) {\n    var c = centroid({type: \"MultiPoint\", coordinates: face});\n    return gnomonic().scale(1).translate([0, 0]).rotate([-c[0], -c[1]]);\n  };\n\n  var faces = octahedron.map(function(face) {\n    return {face: face, project: faceProjection(face)};\n  });\n\n  [-1, 0, 0, 1, 0, 1, 4, 5].forEach(function(d, i) {\n    var node = faces[d];\n    node && (node.children || (node.children = [])).push(faces[i]);\n  });\n\n  return polyhedral(faces[0], function(lambda, phi) {\n        return faces[lambda < -pi / 2 ? phi < 0 ? 6 : 4\n            : lambda < 0 ? phi < 0 ? 2 : 0\n            : lambda < pi / 2 ? phi < 0 ? 3 : 1\n            : phi < 0 ? 7 : 5];\n      })\n      .angle(-30)\n      .scale(101.858)\n      .center([0, 45]);\n}\n"],"names":["Adder","constructor","this","_partials","Float64Array","_n","add","x","p","i","j","y","hi","lo","Math","abs","valueOf","n","merge","arrays","Array","from","array","flatten","range","start","stop","step","arguments","length","max","ceil","epsilon","epsilon2","pi","PI","halfPi","quarterPi","tau","degrees","radians","atan","atan2","cos","hypot","sin","sign","sqrt","acos","asin","haversin","noop","streamGeometry","geometry","stream","streamGeometryType","hasOwnProperty","type","streamObjectType","Feature","object","FeatureCollection","features","Sphere","sphere","Point","coordinates","point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","lineStart","lineEnd","polygonStart","polygonEnd","geoStream","lambda00","phi00","lambda0","cosPhi0","sinPhi0","phi0","lambda1","phi1","lambda2","p0","deltaSum","ranges","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","areaPointFirst","areaPoint","lambda","phi","dLambda","sdLambda","adLambda","cosPhi","sinPhi","k","u","v","spherical","cartesian","cartesianDot","a","b","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","d","l","W0","W1","X0","Y0","Z0","X1","Y1","Z1","X2","Y2","Z2","x0","y0","z0","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","push","linePoint","normal","inflection","phii","delta","lambdai","antimeridian","angle","rangeCompare","rangeContains","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","z","centroidLinePointFirst","centroidLinePoint","w","centroidRingPointFirst","centroidRingPoint","cx","cy","cz","m","centroid","NaN","constant","compose","invert","rotationIdentity","round","rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","rotate","forward","circleStream","radius","direction","t0","t1","cosRadius","sinRadius","circleRadius","t","clipBuffer","line","lines","rejoin","pop","concat","shift","result","pointEqual$2","Intersection","points","other","entry","o","e","clipRejoin","segments","compareIntersection","startInside","interpolate","subject","clip","forEach","segment","p1","pointEqual","sort","link","current","isSubject","longitude","pointVisible","clipLine","sink","polygon","ring","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","winding","sum","point0","sinPhi1","cosPhi1","point1","absDelta","arc","intersection","phiArc","polygonContains","pointLine","clean","ringSegments","filter","validSegment","sign0","sign1","sinLambda0Lambda1","clipAntimeridianIntersect","to","clipMax","clipMin","clipRectangle","x1","y1","visible","a1","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","a0","b0","b1","polygonInside","cleanInside","min","r","ax","ay","dx","dy","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","B","A","distance","Infinity","bounds","boundsStream$1","transformer","methods","s","TransformStream","key","fit","projection","fitBounds","clipExtent","scale","translate","fitExtent","extent","h","prototype","maxDepth","cosMinDistance","resample","project","delta2","resampleLineTo","c0","c1","depth","d2","c","phi2","x2","y2","dx2","dy2","dz","x00","y00","a00","b00","c00","resampleStream","ringPoint","resampleNone","transformRadians","scaleTranslateRotate","sx","sy","alpha","transform","scaleTranslate","cosAlpha","sinAlpha","ai","bi","ci","fi","projectionMutator","projectAt","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","theta","preclip","clipAntimeridian","postclip","identity","recenter","center","apply","reset","transformRotate","_","undefined","clipAngle","cr","smallRadius","notHemisphere","intersect","two","n1","n2","n2n2","n1n2","determinant","c2","n1xn2","uu","t2","q","polar","q1","code","v0","v00","point2","clipCircle","reflectX","reflectY","precision","fitSize","size","fitWidth","width","fitHeight","height","azimuthalRaw","azimuthalInvert","sc","cc","azimuthalEqualAreaRaw","cxcy","azimuthalEquidistantRaw","equirectangularRaw","geoEquirectangular","gnomonicRaw","gnomonic","orthographicRaw","geoOrthographic","exp","floor","log","pow","tan","sqrt1_2","SQRT1_2","sqrt2","sqrtPi","sinh","cosh","airyRaw","beta","tanBeta_2","cosx","cosy","siny","cosz","z_2","cosz_2","sinz_2","tanz_2","lnsecz_2","sinz","aitoffRaw","sincia","sinci","armadilloRaw","sPhi0","tanPhi0","cosLambda","sinLambda","fx","fy","dxdLambda","dxdPhi","dydLambda","dydPhi","denominator","dPhi","augustRaw","tanPhi","f","sinx","sinx_2","cosx_2","sin_2y","sin2y","cos2y","sin2x_2","dxdx","dxdy","dydx","dydy","sin3Eta","eta","xi","arcosh","arsinh","cosEta","coshXi","sqrt8","bakerRaw","berghausRaw","lobes","theta0","cotAlpha","hammerRaw","hammerQuarticAuthalicRaw","solve","f0","f1","steps","solve2d","MAX_ITERATIONS","eps","err2","da","db","tx","ty","ea","eb","pa","pb","dxa","dya","dxb","dyb","D","mollweideBromleyTheta","cp","cpsinPhi","mollweideBromleyRaw","cosPhi_2","tanPhi_2","mollweideRaw","boggsRaw","parallel1","parallel","sinusoidalRaw","bonneRaw","cotPhi0","rho","bottomleyRaw","sinPsi","ky","bromleyRaw","s1","s2","cosdLambda","sindPhi","sindLambda","pointRadians","collignonRaw","craigRaw","sqrt3","crasterRaw","cylindricalEqualAreaRaw","cylindricalStereographicRaw","eckert1Raw","eckert2Raw","eckert3Raw","eckert4Raw","eckert5Raw","eckert6Raw","eisenlohrK","eisenlohrRaw","s0","_0","_1","cos1","v2","vm1v","vp1v","deltatDeltaLambda","deltatDeltaPhi","deltacDeltat","deltacDeltaLambda","deltacDeltaPhi","deltavDeltaLambda","deltavDeltaPhi","deltaxDeltaLambda","deltaxDeltaPhi","deltayDeltaLambda","deltayDeltaPhi","faheyK","faheyRaw","foucautRaw","cosk","foucautSinusoidalRaw","equatorial","raw","ratio","cosphi","sinphi","forwardMeridian","gilbertForward","gilbertInvert","gingeryRaw","rho2","r2","rhoCosAlpha","k_","s_","gingeryLength","gingeryIntegrate","dTheta","x_halfPi","rhosinAlpha","sinRhoCosAlpha","halfPi_RhoCosAlpha","ginzburgPolyconicRaw","g","xB","yB","m2","dAlphadLambda","xB2","dxBdPhi","dyBdPhi","dmdPhi","mcosAlpha","msinAlpha","dAlphadPhi","ginzburg4Raw","ginzburg5Raw","ginzburg6Raw","ginzburg8Raw","lambda4","ginzburg9Raw","squareRaw","projectSquare","location","gringortenRaw","sLambda","sPhi","p2","a2","secPhi","drdPhi","dvdPhi","dp2dPhi","dra2dPhi","mu","nu","zeta","g2","zetaMug","f2","gringortenHexadecant","ellipticJ","twon","ellipticF","guyouRaw","K","psi","at","y_1","guyouComplexAtan","sinhPsi","cscPhi","cotPhi2","cotLambda2","ellipticFi","hammerRetroazimuthalRaw","hammerRetroazimuthalRotation","dpdPhi","dhdPhi","gringortenHexadecantInvert","tn","guyouComplexDivide","healpixParallel","healpixLambert","healpixRaw","H","dy1","sphereTop","sphereBottom","sphereNudge","hillRaw","L","Bt","rho0","K2","L2","omega","sinTheta","cosTheta","Bt_Bt1","C","sinuMollweidePhi","sinuMollweideY","sinuMollweideRaw","homolosineRaw","hufnagelRaw","psiMax","M","mapping","inversemapping","isNaN","kr","adsimp","fa","fm","fb","V0","tol","maxdepth","state","nanEncountered","sl","sr","V1","V2","err","maxDepthCount","integrate","hyperellipticalRaw","gamma","elliptic","G","approx","Y","rmin","rmax","interpolateLine","resampled","interrupt","inverse","lobe","bound","stream_","rotateStream","sphereStream","interpolateSphere","map","kavrayskiy7Raw","lagrangeRaw","pi_sqrt2","larriveeRaw","laskowskiRaw","littrowRaw","loximuthalRaw","millerRaw","sqrtcosPhi","sinPhi_2","sinLambda_6","cosLambda_6","df0dPhi","df0dLambda","df1dPhi","df1dLambda","denom","lambdaPhi","y2_1","x2_y2_1","alaska","gs48","gs50","miller","lee","modifiedStereographic","coefficients","zr","zi","ar","br","deltar","deltai","sinc","modifiedStereographicRaw","sqrt6","sqrt7","mtFlatPolarParabolicRaw","mtFlatPolarQuarticRaw","mtFlatPolarSinusoidalRaw","naturalEarth2Raw","phi4","phi6","nellHammerRaw","sinTheta_2","nicolosiRaw","b2","b2d2","d2b2","N","x2y2","pi2","pattersonK1","pattersonK2","pattersonK3","pattersonK4","pattersonC1","pattersonC2","pattersonC3","pattersonC4","pattersonYmax","pattersonRaw","polyconicRaw","matrix","subtract","multiply","polyhedral","root","face","node","faceInvert","faceDegrees","children","recurse","parent","edges","faceEdges","shared","found","sharedEdge","child","hasInverse","proj","outline","edge","multiPoint","feature","merged","deltaMax","inside","isArray","some","yc","octahedron","octahedron$1","kx","collignonK","dot","quincuncial","projectQuincuncial","rectangularPolyconicRaw","E","cotPhi","robinsonRaw","i0","di","bx","by","satelliteRaw","P","vertical","satelliteVerticalRaw","cosOmega","sinOmega","timesRaw","twoPoint","R","twoPointAzimuthalRaw","cosd","twoPointEquidistantRaw","lambdaa","lambdab","z02","tanLambda0","S","za","zb","cosza","coszb","vanDerGrintenRaw","A2","P2","P2_A2","G_P2","Q","vanDerGrinten2Raw","vanDerGrinten3Raw","vanDerGrinten4Raw","B2","C2","BC","B_C2","B_3C","D2","wagnerRaw","poleline","parallels","inflation","vratio","m1","wagnerFormula","wagner","mutate","x2_y2","c3","theta1","C_","B_C","F_","sqrtF","wagner4Raw","wagner6Raw","wiechelRaw","sin1_Phi","winkel3Raw","F","sin_2phi","sin2phi","cos2phi","sinlambda","coslambda_2","sinlambda_2","sin2lambda_2","dxdlambda","dxdphi","dydlambda","dydphi","dlambda","dphi","projectionStream","delta0","hammer","bertin1953Raw","fraction","beta0","beta1","beta2","mean","slice","chamberlinRaw","chamberlin","projectionType","equirectangular","gilbert","property","name","cRho","sRho","coefficient","rotate_","circle","geoCircle","call","spacing","faceProjection","faces","w5","xyz","hexagon","cornerNormals","parents","normals","tilt","twoPointAzimuthal","twoPointEquidistant","geoWagner"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,135,136,137,138]}